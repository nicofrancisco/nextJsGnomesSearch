{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoComplete/AutoComplete.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Suggestions from \"./Suggestions/Suggestions\";\nimport { ContainerInput, InputSearch } from \"./AutoCompleteStyles\";\n\nclass AutoComplete extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchTerm: \"\",\n      open: false,\n      suggestedItems: [],\n      currentOption: 0\n    });\n\n    _defineProperty(this, \"handleClickOutside\", event => {\n      // Control when user clicks outside the input components\n      // if the suggestions box is open when click uutside will close the\n      // box\n\n      /* eslint-disable */\n      // IT'S BEST PRACTICE TO USE REF INSTEAD\n      // I had to use finDOMNode method provisionally since\n      // i'm having problems implementing ref\n      const thisComponent = ReactDOM.findDOMNode(this);\n      /* eslint-enable */\n\n      if (!thisComponent || !thisComponent.contains(event.target)) {\n        this.setState({\n          open: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateLocalState\", state => this.setState(state));\n\n    _defineProperty(this, \"updateParentState\", searchTerm => {\n      this.props.parentUpdateState(searchTerm);\n    });\n  }\n\n  componentDidMount() {\n    // When component mount listen click event when click on document\n    document.addEventListener(\"click\", this.handleClickOutside); //console.log(this.props.autoCompleteItems)\n  }\n\n  componentWillUnmount() {\n    // Remove click event handler on document when component unmounts\n    document.removeEventListener(\"click\", this.handleClickOutside);\n  }\n\n  render() {\n    const {\n      searchTerm,\n      open\n    } = this.state;\n    return __jsx(ContainerInput, {\n      className: \"autocomplete\",\n      showLabel: this.props.showLabel,\n      htmlFor: this.props.stateName,\n      maxWidth: this.props.maxWidth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.props.labelName.length > 0 && __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" \", this.props.labelName, \" \"), __jsx(InputSearch, {\n      autoComplete: \"off\",\n      type: \"text\",\n      id: this.props.stateName,\n      onChange: AutoComplete.handleTermChange(this.updateLocalState, this.updateParentState, this.props.updateCurrentPage, this.props.autoCompleteItems, this.props.maxSuggests, this.props.includeSearchTerm),\n      onFocus: AutoComplete.handleFocusInput(this.updateLocalState, searchTerm, this.updateParentState),\n      onKeyDown: AutoComplete.handleCloseAutoComplete(this.updateLocalState, this.state, this.updateParentState, this.props.updateCurrentPage),\n      value: searchTerm,\n      placeholder: this.props.placeholder,\n      open: open && searchTerm.length > 0 ? open : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), __jsx(Suggestions, _extends({\n      open: open,\n      maxWidth: this.props.maxWidth,\n      updateLocalState: this.updateLocalState,\n      updateParentState: this.updateParentState\n    }, this.state, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n} // this approach on declaring events handlers improves\n// Readability and maintainance also improve time loading\n// since the class and components will be read first by\n// the browser engine - also it's the unique reference for all\n// others components which would need this\n// Handling onChange event\n// it will receive data to update the parent state\n\n\n_defineProperty(AutoComplete, \"defaultProps\", {\n  maxSuggests: 10,\n  maxWidth: \"300px\",\n  includeSearchTerm: false,\n  labelName: \"\",\n  showLabel: false,\n  placeholder: \"\"\n});\n\nAutoComplete.handleTermChange = (updateLocalState, updateParentState, updateCurrentPage, autoCompleteItems, maxSuggests, includeSearchTerm) => event => {\n  // Differences between e.target and e.currentTarget\n  // target = element that triggered event. or in other words\n  // it could be whatever that's actualy clicked on. It can vary, as this\n  // can be within an element that the event was bound to\n  // currentTarget = element that listens to event.\n  // currentTarget is the element you actually bound the event to.\n  // This will never change.\n  // Since i accessed to the DOM element that's associated with the event handler\n  // I defined, i used currentTarget.\n  // Every time the user type a new letter the filter method\n  // Will detect matches with the names of every gnome in the array\n  const AutoCompleteList = autoCompleteItems.filter(autoCompleteItem => {\n    // If the search item is include within the array item this will show\n    // all the options which includes the search items\n    if (includeSearchTerm) {\n      return autoCompleteItem.toLowerCase().indexOf(event.target.value.toLowerCase()) >= 0;\n    } // By default the autocomplete input will show only the options which\n    // search term starts and includes with the search term\n\n\n    return autoCompleteItem.toLowerCase().search(event.target.value.toLowerCase()) === 0;\n  }).splice(0, maxSuggests); // Control how many suggestions will be show\n\n  updateLocalState({\n    searchTerm: event.currentTarget.value,\n    // update the controlled component\n    open: AutoCompleteList.length !== 0,\n    // If there is not a match close the suggestion box\n    suggestedItems: AutoCompleteList,\n    // return an array of all suggestions\n    currentOption: -1 // disable suggest the first item, to enable switch it to 0\n\n  }); // update global state of the parent search term\n\n  updateParentState(event.currentTarget.value); // When search for a new letter pagination will reset to page 1\n\n  updateCurrentPage(0);\n}; // handle on Focus\n\n\nAutoComplete.handleFocusInput = (updateLocalState, searchTerm, updateParentState) => event => {\n  event.preventDefault(); // if there are at least one letter in the input and if it is focused\n  // open the box with suggestions\n\n  const open = searchTerm > 0;\n  updateLocalState({\n    open\n  });\n  updateParentState(searchTerm);\n}; // handle on keydown\n\n\nAutoComplete.handleCloseAutoComplete = (updateLocalState, state, updateParentState, updateCurrentPage) => event => {\n  // When user press ESC key\n  // Close the suggestion box and reset all suggestions\n  if (event.which === 27) {\n    updateLocalState({\n      open: false,\n      suggestedItems: []\n    });\n  } else if (event.keyCode === 13) {\n    // When Enter\n    // if there is a suggested option pass it to the state if not check if -1 and just send the current search term\n    // reset the suggestions and close the box and algo depending of the position\n    // of the current option it will return the suggested option or tbe search Term\n    // only if the current option is bigger or equal to 0 it will return the suggestion\n    const processSearch = state.currentOption === -1 ? state.searchTerm : state.suggestedItems[state.currentOption];\n    updateLocalState({\n      open: false,\n      searchTerm: processSearch,\n      suggestedItems: [],\n      currentOption: -1\n    }); // Get pagination to page 1\n\n    updateCurrentPage(0);\n    updateParentState(processSearch);\n  } else if (event.keyCode === 40) {\n    // When arrow up\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow up button it will decrease\n    // the suggestion options\n    // suggestion options cant be less than -1 so in this case\n    // when click up always returns -1\n    updateLocalState(prevState => {\n      const arrayItem = prevState.suggestedItems.length - 1;\n      const maxOption = prevState.currentOption < arrayItem ? prevState.currentOption + 1 : arrayItem;\n      return {\n        currentOption: maxOption\n      };\n    });\n  } else if (event.keyCode === 38) {\n    // When arrow down\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow down button it will increase\n    // the suggestion options\n    updateLocalState(prevState => {\n      // If not selected option return -1\n      const minOption = prevState.currentOption < 1 ? -1 : prevState.currentOption - 1;\n      return {\n        currentOption: minOption\n      };\n    });\n  } else if (event.keyCode === 9) {\n    updateLocalState({\n      currentOption: 0,\n      suggestedItems: [],\n      open: false\n    });\n  }\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoComplete/AutoComplete.jsx"],"names":["React","Component","ReactDOM","Suggestions","ContainerInput","InputSearch","AutoComplete","searchTerm","open","suggestedItems","currentOption","event","thisComponent","findDOMNode","contains","target","setState","state","props","parentUpdateState","componentDidMount","document","addEventListener","handleClickOutside","componentWillUnmount","removeEventListener","render","showLabel","stateName","maxWidth","labelName","length","handleTermChange","updateLocalState","updateParentState","updateCurrentPage","autoCompleteItems","maxSuggests","includeSearchTerm","handleFocusInput","handleCloseAutoComplete","placeholder","AutoCompleteList","filter","autoCompleteItem","toLowerCase","indexOf","value","search","splice","currentTarget","preventDefault","which","keyCode","processSearch","prevState","arrayItem","maxOption","minOption"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Suggestions from \"./Suggestions/Suggestions\";\nimport { ContainerInput, InputSearch } from \"./AutoCompleteStyles\";\n\nclass AutoComplete extends Component{\n  static defaultProps = {\n    maxSuggests: 10,\n    maxWidth: \"300px\",\n    includeSearchTerm: false,\n    labelName: \"\",\n    showLabel: false,\n    placeholder: \"\"\n  };\n\n  state = {\n    searchTerm: \"\",\n    open: false,\n    suggestedItems: [],\n    currentOption: 0\n  };\n\n  componentDidMount() {\n    // When component mount listen click event when click on document\n    document.addEventListener(\"click\", this.handleClickOutside);\n    //console.log(this.props.autoCompleteItems)\n  }\n\n  componentWillUnmount() {\n    // Remove click event handler on document when component unmounts\n    document.removeEventListener(\"click\", this.handleClickOutside);\n  }\n\n  handleClickOutside = event => {\n    // Control when user clicks outside the input components\n    // if the suggestions box is open when click uutside will close the\n    // box\n    /* eslint-disable */\n    // IT'S BEST PRACTICE TO USE REF INSTEAD\n    // I had to use finDOMNode method provisionally since\n    // i'm having problems implementing ref\n    const thisComponent = ReactDOM.findDOMNode(this);\n    /* eslint-enable */\n    if (!thisComponent || !thisComponent.contains(event.target)) {\n      this.setState({\n        open: false\n      });\n    }\n  };\n\n  // control the entire state control of this component\n  updateLocalState = (state) => this.setState(state);\n  // This will update parent state which control this component\n  updateParentState = (searchTerm) => {\n    this.props.parentUpdateState(searchTerm);\n  };\n\n  render() {\n    const { searchTerm, open } = this.state;\n    return (\n      <ContainerInput\n        className=\"autocomplete\"\n        showLabel={this.props.showLabel}\n        htmlFor={this.props.stateName}\n        maxWidth={this.props.maxWidth}\n      >\n        {this.props.labelName.length > 0 && (\n          <span> {this.props.labelName} </span>\n        )}\n        <InputSearch\n          autoComplete=\"off\"\n          type=\"text\"\n          id={this.props.stateName}\n          onChange={AutoComplete.handleTermChange(\n            this.updateLocalState,\n            this.updateParentState,\n            this.props.updateCurrentPage,\n            this.props.autoCompleteItems,\n            this.props.maxSuggests,\n            this.props.includeSearchTerm\n          )}\n          onFocus={AutoComplete.handleFocusInput(\n            this.updateLocalState,\n            searchTerm,\n            this.updateParentState\n          )}\n          onKeyDown={AutoComplete.handleCloseAutoComplete(\n            this.updateLocalState,\n            this.state,\n            this.updateParentState,\n            this.props.updateCurrentPage\n          )}\n          value={searchTerm}\n          placeholder={this.props.placeholder}\n          open={open && searchTerm.length > 0 ? open : false}\n        />\n        <Suggestions\n          open={open}\n          maxWidth={this.props.maxWidth}\n          updateLocalState={this.updateLocalState}\n          updateParentState={this.updateParentState}\n          {...this.state}\n          {...this.props}\n        />\n      </ContainerInput>\n    );\n  }\n}\n\n// this approach on declaring events handlers improves\n// Readability and maintainance also improve time loading\n// since the class and components will be read first by\n// the browser engine - also it's the unique reference for all\n// others components which would need this\n\n// Handling onChange event\n// it will receive data to update the parent state\nAutoComplete.handleTermChange = (\n  updateLocalState,\n  updateParentState,\n  updateCurrentPage,\n  autoCompleteItems,\n  maxSuggests,\n  includeSearchTerm,\n) => (event) => {\n  // Differences between e.target and e.currentTarget\n  // target = element that triggered event. or in other words\n  // it could be whatever that's actualy clicked on. It can vary, as this\n  // can be within an element that the event was bound to\n  // currentTarget = element that listens to event.\n  // currentTarget is the element you actually bound the event to.\n  // This will never change.\n\n  // Since i accessed to the DOM element that's associated with the event handler\n  // I defined, i used currentTarget.\n\n  // Every time the user type a new letter the filter method\n  // Will detect matches with the names of every gnome in the array\n  const AutoCompleteList = autoCompleteItems\n    .filter(autoCompleteItem => {\n      // If the search item is include within the array item this will show\n      // all the options which includes the search items\n      if (includeSearchTerm) {\n        return (\n          autoCompleteItem\n            .toLowerCase()\n            .indexOf(event.target.value.toLowerCase()) >= 0\n        );\n      }\n      // By default the autocomplete input will show only the options which\n      // search term starts and includes with the search term\n      return (\n        autoCompleteItem\n          .toLowerCase()\n          .search(event.target.value.toLowerCase()) === 0\n      );\n    })\n    .splice(0, maxSuggests);\n    // Control how many suggestions will be show\n\n  updateLocalState({\n    searchTerm: event.currentTarget.value, // update the controlled component\n    open: AutoCompleteList.length !== 0, // If there is not a match close the suggestion box\n    suggestedItems: AutoCompleteList, // return an array of all suggestions\n    currentOption: -1 // disable suggest the first item, to enable switch it to 0\n  });\n  // update global state of the parent search term\n  updateParentState(event.currentTarget.value);\n  // When search for a new letter pagination will reset to page 1\n  updateCurrentPage(0);\n};\n\n// handle on Focus\nAutoComplete.handleFocusInput = (\n  updateLocalState,\n  searchTerm,\n  updateParentState,\n) => (event) => {\n  event.preventDefault();\n  // if there are at least one letter in the input and if it is focused\n  // open the box with suggestions\n  const open = searchTerm > 0;\n\n  updateLocalState({\n    open\n  });\n  updateParentState(searchTerm);\n};\n\n// handle on keydown\nAutoComplete.handleCloseAutoComplete = (\n  updateLocalState,\n  state,\n  updateParentState,\n  updateCurrentPage,\n) => (event,) => {\n  // When user press ESC key\n  // Close the suggestion box and reset all suggestions\n  if (event.which === 27) {\n    updateLocalState({\n      open: false,\n      suggestedItems: []\n    });\n  } else if (event.keyCode === 13) {\n    // When Enter\n    // if there is a suggested option pass it to the state if not check if -1 and just send the current search term\n    // reset the suggestions and close the box and algo depending of the position\n    // of the current option it will return the suggested option or tbe search Term\n    // only if the current option is bigger or equal to 0 it will return the suggestion\n    const processSearch =\n      state.currentOption === -1\n        ? state.searchTerm\n        : state.suggestedItems[state.currentOption];\n    updateLocalState({\n      open: false,\n      searchTerm: processSearch,\n      suggestedItems: [],\n      currentOption: -1\n    });\n    // Get pagination to page 1\n    updateCurrentPage(0);\n    updateParentState(processSearch);\n  } else if (event.keyCode === 40) {\n    // When arrow up\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow up button it will decrease\n    // the suggestion options\n    // suggestion options cant be less than -1 so in this case\n    // when click up always returns -1\n    updateLocalState(prevState => {\n      const arrayItem = prevState.suggestedItems.length - 1;\n      const maxOption =\n        prevState.currentOption < arrayItem\n          ? prevState.currentOption + 1\n          : arrayItem;\n      return {\n        currentOption: maxOption\n      };\n    });\n  } else if (event.keyCode === 38) {\n        // When arrow down\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow down button it will increase\n    // the suggestion options\n\n    updateLocalState(prevState => {\n      // If not selected option return -1\n      const minOption =\n        prevState.currentOption < 1 ? -1 : prevState.currentOption - 1;\n      return {\n        currentOption: minOption\n      };\n    });\n  } else if (event.keyCode === 9) {\n    updateLocalState({\n      currentOption: 0,\n      suggestedItems: [],\n      open: false\n    });\n  }\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}