{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/actions/actions\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({\n  fetchGender,\n  gnomes,\n  gender,\n  currentPage,\n  page,\n  updateGlobalState,\n  maxPages\n}) => {\n  console.log(gender);\n  console.log(gnomes);\n  useEffect(() => {\n    console.log(\"calling again\");\n    fetchGender(format).then(response => {\n      JSON.stringify(response);\n      console.log(response);\n    });\n    console.log(\"gender x\");\n    console.log(gender);\n  }, []);\n  console.log(\"AFTER\");\n  console.log(gender);\n  const itemsByPage = 15;\n  const gnomeNames = gnomes.map(gnome => gnome.name);\n  const pageGnomes = gnomeNames.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage); // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(gnome => gnome => gnome.name);\n\n  const getFirstName = arr => {\n    var arrCroped = [];\n\n    for (var a = 0; a < arr.length; a++) {\n      var corte = arr[a].indexOf(\" \");\n      arrCroped[a] = arr[a].substr(0, corte);\n    }\n\n    return arrCroped;\n  };\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n\n  const parseToService = arrToFormat => {\n    var arrayFormated = [];\n\n    for (var b = 0; b < arrToFormat.length; b++) {\n      arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n    }\n\n    return arrayFormated;\n  };\n\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n  return __jsx(PaginationWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(PaginationBtn, {\n    disableStyle: page <= 0,\n    page: page,\n    onClick: Pagination.onClick(updateGlobalState, page),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Previous\"), __jsx(\"span\", {\n    className: \"current-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Page: \", page + 1), __jsx(PaginationBtn, {\n    disableStyle: page >= maxPages,\n    page: page,\n    onClick: Pagination.onClick(updateGlobalState, page, maxPages),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Next\"));\n};\n\nPagination.onClick = (updateGlobalState, page, maxPages, gender) => (event = event.currentTarget) => {\n  event.preventDefault(); // when page change take scroll to top\n\n  window.scroll(null, 0);\n  console.log(gender); //callGender(propsGender)\n  // Get the button name\n\n  const btnName = event.currentTarget.textContent.toLowerCase(); // if btnName is equal tot the nextButton value add a page until find the last page\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nfunction mapStateToProps(state) {\n  console.log(\"pagination gender\");\n  console.log(state);\n  return {\n    gnomes: state.gnomes,\n    gender: state.gender,\n    currentPage: state.currentPage\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Pagination); //export default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","useState","useEffect","connect","actions","PaginationWrapper","PaginationBtn","nextButtonValue","previousButtonValue","Pagination","fetchGender","gnomes","gender","currentPage","page","updateGlobalState","maxPages","console","log","format","then","response","JSON","stringify","itemsByPage","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","toString","replace","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","nextPage","previousPage","defaultProps","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/actions/actions\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({ fetchGender, gnomes, gender, currentPage, page, updateGlobalState, maxPages}) => {\n\n  console.log(gender)\n  console.log(gnomes)\n\n  useEffect(() => {\n    console.log(\"calling again\")\n    fetchGender(format).then(response =>{ JSON.stringify(response); console.log(response)})\n\n    console.log(\"gender x\")\n    console.log(gender)\n\n  }, [])\n\n  console.log(\"AFTER\")\n  console.log(gender)\n  const itemsByPage = 15;\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n  itemsByPage * currentPage,\n  itemsByPage + currentPage * itemsByPage\n  ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(gnome => (\n    gnome => gnome.name\n  ))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n      return arrCroped;\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n      }\n\n      return arrayFormated;\n\n  }\n\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n\n  return(\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page, maxPages)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n)};\n\nPagination.onClick = (updateGlobalState, page, maxPages, gender) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  // when page change take scroll to top\n  window.scroll(null, 0);\n  console.log(gender)\n  //callGender(propsGender)\n  // Get the button name\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  // if btnName is equal tot the nextButton value add a page until find the last page\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nfunction mapStateToProps(state) {\n  console.log(\"pagination gender\")\n  console.log(state)\n  return {\n    gnomes: state.gnomes,\n    gender: state.gender,\n    currentPage: state.currentPage\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Pagination);\n\n//export default Pagination;\n"]},"metadata":{},"sourceType":"module"}