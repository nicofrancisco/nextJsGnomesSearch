{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Filters/Filters.jsx\";\nvar __jsx = React.createElement;\n// @flow\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormSearch, FormRow } from \"./FiltersStyled\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport AutoCompleteInput from \"./../../components/AutoCompleteInput/AutoCompleteInput\";\nimport Select from \"./../../components/Select/Select\";\nimport OrderByBTN from \"./../../components/OrderByBTN/OrderByBTN\"; //import type { Gnome } from \"./../../../flow-typed/types\";\n\n/*type Props = {\n  getSearchText: Function,\n  filterByJob: Function,\n  getCurrentPage: Function,\n  gnomes: Array<Gnome>\n};*/\n\nconst Filters = props => {\n  // Generate and array of all the names of the gnomes which will\n  // Be used for autocomplete input component to show suggestions\n  const gnomeNames = props.gnomes.map(gnome => gnome.name); // Create an array with all the professions that has the gnomes\n  // in the town\n\n  let getJobs = [];\n  /* eslint-disable */\n\n  /* FIND A BETTER WAY TO DO THIS */\n  // Get all the professions of the gnomes\n\n  for (let i = 0; i < props.gnomes.length; i++) {\n    getJobs = getJobs.concat(props.gnomes[i].professions);\n  }\n  /* eslint-enable */\n  // clearing the array removing all repetitive item\n\n\n  const jobs = Array.from(new Set(getJobs));\n  return __jsx(FormSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(FormRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(AutoCompleteInput, {\n    stateName: \"searchTerm\",\n    updateCurrentPage: props.getCurrentPage,\n    parentUpdateState: props.getSearchText,\n    autoCompleteItems: gnomeNames,\n    maxSuggests: 5,\n    maxWidth: \"100%\",\n    labelName: \"Search Gnome Name: \",\n    placeholder: \"Search by Name\",\n    includeSearchTerm: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Oldest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Youngest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Heaviest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Lightest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Most Popular\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Less Popular\"), __jsx(\"div\", {\n    className: \"profession\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Search by Profession\"), __jsx(Select, {\n    items: jobs && jobs,\n    defaultValue: \"All Professions\",\n    stateName: \"filteBy\",\n    maxWidth: \"100%\",\n    updateState: props.filterByJob,\n    updateCurrentPage: props.getCurrentPage,\n    state: props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Filters);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Filters/Filters.jsx"],"names":["React","connect","FormSearch","FormRow","actions","AutoCompleteInput","Select","OrderByBTN","Filters","props","gnomeNames","gnomes","map","gnome","name","getJobs","i","length","concat","professions","jobs","Array","from","Set","getCurrentPage","getSearchText","filterByJob","mapStateToProps","state"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,iBAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,wDAA9B;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,UAAP,MAAuB,0CAAvB,C,CACA;;AAEA;;;;;;;AAOA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB;AACA;AACA,QAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IAAIA,KAAK,CAACC,IAAhC,CAAnB,CAHyB,CAKzB;AACA;;AACA,MAAIC,OAAO,GAAG,EAAd;AACA;;AACA;AACA;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACE,MAAN,CAAaM,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,IAAAA,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAeT,KAAK,CAACE,MAAN,CAAaK,CAAb,EAAgBG,WAA/B,CAAV;AACD;AACD;AAEA;;;AACA,QAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQR,OAAR,CAAX,CAAb;AAEA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,iBAAiB,EAAEN,KAAK,CAACe,cAF3B;AAGE,IAAA,iBAAiB,EAAEf,KAAK,CAACgB,aAH3B;AAIE,IAAA,iBAAiB,EAAEf,UAJrB;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,QAAQ,EAAC,MANX;AAOE,IAAA,SAAS,EAAC,qBAPZ;AAQE,IAAA,WAAW,EAAC,gBARd;AASE,IAAA,iBAAiB,MATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,EAcE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,EAeE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF,EAgBE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF,EAiBE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjBF,EAkBE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF,EAmBE;AAAK,IAAA,SAAS,EAAE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAnBF,EAoBE,MAAC,MAAD;AACE,IAAA,KAAK,EAAEU,IAAI,IAAIA,IADjB;AAEE,IAAA,YAAY,EAAC,iBAFf;AAGE,IAAA,SAAS,EAAC,SAHZ;AAIE,IAAA,QAAQ,EAAC,MAJX;AAKE,IAAA,WAAW,EAAEX,KAAK,CAACiB,WALrB;AAME,IAAA,iBAAiB,EAAEjB,KAAK,CAACe,cAN3B;AAOE,IAAA,KAAK,EAAEf,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF,CADF;AAkCD,CAtDD;;AAwDA,SAASkB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLjB,IAAAA,MAAM,EAAEiB,KAAK,CAACjB;AADT,GAAP;AAGD;;AAED,eAAeV,OAAO,CAAC0B,eAAD,EAAkBvB,OAAlB,CAAP,CAAkCI,OAAlC,CAAf","sourcesContent":["// @flow\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormSearch, FormRow } from \"./FiltersStyled\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport AutoCompleteInput from \"./../../components/AutoCompleteInput/AutoCompleteInput\";\nimport Select from \"./../../components/Select/Select\";\nimport OrderByBTN from \"./../../components/OrderByBTN/OrderByBTN\";\n//import type { Gnome } from \"./../../../flow-typed/types\";\n\n/*type Props = {\n  getSearchText: Function,\n  filterByJob: Function,\n  getCurrentPage: Function,\n  gnomes: Array<Gnome>\n};*/\n\nconst Filters = (props) => {\n  // Generate and array of all the names of the gnomes which will\n  // Be used for autocomplete input component to show suggestions\n  const gnomeNames = props.gnomes.map(gnome => gnome.name);\n\n  // Create an array with all the professions that has the gnomes\n  // in the town\n  let getJobs = [];\n  /* eslint-disable */\n  /* FIND A BETTER WAY TO DO THIS */\n  // Get all the professions of the gnomes\n\n  for (let i = 0; i < props.gnomes.length; i++) {\n    getJobs = getJobs.concat(props.gnomes[i].professions);\n  }\n  /* eslint-enable */\n\n  // clearing the array removing all repetitive item\n  const jobs = Array.from(new Set(getJobs));\n\n  return (\n    <FormSearch>\n      <FormRow>\n        <AutoCompleteInput\n          stateName=\"searchTerm\"\n          updateCurrentPage={props.getCurrentPage}\n          parentUpdateState={props.getSearchText}\n          autoCompleteItems={gnomeNames}\n          maxSuggests={5}\n          maxWidth=\"100%\"\n          labelName=\"Search Gnome Name: \"\n          placeholder=\"Search by Name\"\n          includeSearchTerm\n        />\n\n        <OrderByBTN>Oldest</OrderByBTN>\n        <OrderByBTN>Youngest</OrderByBTN>\n        <OrderByBTN>Heaviest</OrderByBTN>\n        <OrderByBTN>Lightest</OrderByBTN>\n        <OrderByBTN>Most Popular</OrderByBTN>\n        <OrderByBTN>Less Popular</OrderByBTN>\n        <div className={\"profession\"}>Search by Profession</div>\n        <Select\n          items={jobs && jobs}\n          defaultValue=\"All Professions\"\n          stateName=\"filteBy\"\n          maxWidth=\"100%\"\n          updateState={props.filterByJob}\n          updateCurrentPage={props.getCurrentPage}\n          state={props}\n        />\n      </FormRow>\n    </FormSearch>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Filters);\n"]},"metadata":{},"sourceType":"module"}