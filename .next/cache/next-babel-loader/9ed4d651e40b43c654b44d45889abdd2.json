{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoCompleteInput/Suggestions/Suggestions.jsx\";\nvar __jsx = React.createElement;\n// @flow\nimport React from \"react\";\nimport { ItemSuggestions, Suggestion } from \"./SuggestionsStyled\"; // Declaring Flow Props types\n\n/*type Props = {\n  searchTerm: string,\n  maxWidth: string,\n  updateLocalState: Function,\n  updateParentState: Function,\n  open: boolean,\n  suggestedItems: Array<string>,\n  currentOption: number\n};*/\n\n/*\n  If open exist and there is at least one character in search term\n  open the suggestion box\n*/\n\nvar Suggestions = function Suggestions(_ref) {\n  var searchTerm = _ref.searchTerm,\n      maxWidth = _ref.maxWidth,\n      updateLocalState = _ref.updateLocalState,\n      updateParentState = _ref.updateParentState,\n      open = _ref.open,\n      suggestedItems = _ref.suggestedItems,\n      currentOption = _ref.currentOption;\n  return __jsx(ItemSuggestions, {\n    open: open && searchTerm.length > 0 ? open : false,\n    maxWidth: maxWidth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"suggestions-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, suggestedItems.map(function (autoCompleteItem) {\n    return __jsx(Suggestion, {\n      key: autoCompleteItem,\n      onClick: Suggestions.selectCompletion(updateLocalState, updateParentState),\n      onMouseOver: Suggestions.mouseOverSuggestion(updateLocalState, suggestedItems.indexOf(autoCompleteItem)),\n      onMouseLeave: Suggestions.mouseLeaveSuggestion(updateLocalState),\n      onFocus: Suggestions.hoverFocus,\n      active: suggestedItems[currentOption] === autoCompleteItem,\n      role: \"presentation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, autoCompleteItem);\n  })));\n}; // Select suggestion on Mouse Click\n\n\nSuggestions.selectCompletion = function (updateLocalState, updateParentState) {\n  return function (event) {\n    event.preventDefault(); // When option selected return this to searchTerm and update the state\n    // to filter the items\n    // Also close the suggestion box, resetting the suggestion items and current options go to -1\n\n    updateLocalState({\n      searchTerm: event.currentTarget.textContent,\n      open: false,\n      suggestedItems: [],\n      currentOption: -1\n    });\n    updateParentState(event.target.textContent);\n  };\n}; // Suggestion when mouse is over and option\n\n\nSuggestions.mouseOverSuggestion = function (updateLocalState, indexNumber) {\n  return function () {\n    // get the selected option and update the current option\n    updateLocalState({\n      currentOption: indexNumber\n    });\n  };\n}; // When mouse leaves the suggestion reset the current option to -1\n\n\nSuggestions.mouseLeaveSuggestion = function (updateLocalState) {\n  return function () {\n    updateLocalState({\n      currentOption: -1\n    });\n  };\n}; // used together with mouse leave and enter for accesibility.\n\n\nSuggestions.hoverFocus = function (event) {\n  event.focus();\n};\n\nexport default Suggestions;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoCompleteInput/Suggestions/Suggestions.jsx"],"names":["React","ItemSuggestions","Suggestion","Suggestions","searchTerm","maxWidth","updateLocalState","updateParentState","open","suggestedItems","currentOption","length","map","autoCompleteItem","selectCompletion","mouseOverSuggestion","indexOf","mouseLeaveSuggestion","hoverFocus","event","preventDefault","currentTarget","textContent","target","indexNumber","focus"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,qBAA5C,C,CAEA;;AACA;;;;;;;;;;AAUA;;;;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAClBC,UADkB,QAClBA,UADkB;AAAA,MAElBC,QAFkB,QAElBA,QAFkB;AAAA,MAGlBC,gBAHkB,QAGlBA,gBAHkB;AAAA,MAIlBC,iBAJkB,QAIlBA,iBAJkB;AAAA,MAKlBC,IALkB,QAKlBA,IALkB;AAAA,MAMlBC,cANkB,QAMlBA,cANkB;AAAA,MAOlBC,aAPkB,QAOlBA,aAPkB;AAAA,SASlB,MAAC,eAAD;AACE,IAAA,IAAI,EAAEF,IAAI,IAAIJ,UAAU,CAACO,MAAX,GAAoB,CAA5B,GAAgCH,IAAhC,GAAuC,KAD/C;AAEE,IAAA,QAAQ,EAAEH,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,cAAc,CAACG,GAAf,CAAmB,UAAAC,gBAAgB;AAAA,WAClC,MAAC,UAAD;AACE,MAAA,GAAG,EAAEA,gBADP;AAEE,MAAA,OAAO,EAAEV,WAAW,CAACW,gBAAZ,CACPR,gBADO,EAEPC,iBAFO,CAFX;AAME,MAAA,WAAW,EAAEJ,WAAW,CAACY,mBAAZ,CACXT,gBADW,EAEXG,cAAc,CAACO,OAAf,CAAuBH,gBAAvB,CAFW,CANf;AAUE,MAAA,YAAY,EAAEV,WAAW,CAACc,oBAAZ,CAAiCX,gBAAjC,CAVhB;AAWE,MAAA,OAAO,EAAEH,WAAW,CAACe,UAXvB;AAYE,MAAA,MAAM,EAAET,cAAc,CAACC,aAAD,CAAd,KAAkCG,gBAZ5C;AAaE,MAAA,IAAI,EAAC,cAbP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAeGA,gBAfH,CADkC;AAAA,GAAnC,CADH,CAJF,CATkB;AAAA,CAApB,C,CAqCA;;;AACAV,WAAW,CAACW,gBAAZ,GAA+B,UAC7BR,gBAD6B,EAE7BC,iBAF6B;AAAA,SAG1B,UAACY,KAAD,EAAW;AACdA,IAAAA,KAAK,CAACC,cAAN,GADc,CAEd;AACA;AACA;;AACAd,IAAAA,gBAAgB,CAAC;AACfF,MAAAA,UAAU,EAAEe,KAAK,CAACE,aAAN,CAAoBC,WADjB;AAEfd,MAAAA,IAAI,EAAE,KAFS;AAGfC,MAAAA,cAAc,EAAE,EAHD;AAIfC,MAAAA,aAAa,EAAE,CAAC;AAJD,KAAD,CAAhB;AAMAH,IAAAA,iBAAiB,CAACY,KAAK,CAACI,MAAN,CAAaD,WAAd,CAAjB;AACD,GAf8B;AAAA,CAA/B,C,CAiBA;;;AACAnB,WAAW,CAACY,mBAAZ,GAAkC,UAChCT,gBADgC,EAEhCkB,WAFgC;AAAA,SAG7B,YAAM;AACT;AACAlB,IAAAA,gBAAgB,CAAC;AACfI,MAAAA,aAAa,EAAEc;AADA,KAAD,CAAhB;AAGD,GARiC;AAAA,CAAlC,C,CAUA;;;AACArB,WAAW,CAACc,oBAAZ,GAAmC,UAACX,gBAAD;AAAA,SAAsB,YAAM;AAC7DA,IAAAA,gBAAgB,CAAC;AACfI,MAAAA,aAAa,EAAE,CAAC;AADD,KAAD,CAAhB;AAGD,GAJkC;AAAA,CAAnC,C,CAKA;;;AACAP,WAAW,CAACe,UAAZ,GAAyB,UAACC,KAAD,EAAW;AAClCA,EAAAA,KAAK,CAACM,KAAN;AACD,CAFD;;AAIA,eAAetB,WAAf","sourcesContent":["// @flow\nimport React from \"react\";\nimport { ItemSuggestions, Suggestion } from \"./SuggestionsStyled\";\n\n// Declaring Flow Props types\n/*type Props = {\n  searchTerm: string,\n  maxWidth: string,\n  updateLocalState: Function,\n  updateParentState: Function,\n  open: boolean,\n  suggestedItems: Array<string>,\n  currentOption: number\n};*/\n\n/*\n  If open exist and there is at least one character in search term\n  open the suggestion box\n*/\nconst Suggestions = ({\n  searchTerm,\n  maxWidth,\n  updateLocalState,\n  updateParentState,\n  open,\n  suggestedItems,\n  currentOption\n}) => (\n  <ItemSuggestions\n    open={open && searchTerm.length > 0 ? open : false}\n    maxWidth={maxWidth}\n  >\n    <ul className=\"suggestions-list\">\n      {suggestedItems.map(autoCompleteItem => (\n        <Suggestion\n          key={autoCompleteItem}\n          onClick={Suggestions.selectCompletion(\n            updateLocalState,\n            updateParentState\n          )}\n          onMouseOver={Suggestions.mouseOverSuggestion(\n            updateLocalState,\n            suggestedItems.indexOf(autoCompleteItem)\n          )}\n          onMouseLeave={Suggestions.mouseLeaveSuggestion(updateLocalState)}\n          onFocus={Suggestions.hoverFocus}\n          active={suggestedItems[currentOption] === autoCompleteItem}\n          role=\"presentation\"\n        >\n          {autoCompleteItem}\n        </Suggestion>\n      ))}\n    </ul>\n  </ItemSuggestions>\n);\n\n// Select suggestion on Mouse Click\nSuggestions.selectCompletion = (\n  updateLocalState,\n  updateParentState,\n) => (event) => {\n  event.preventDefault();\n  // When option selected return this to searchTerm and update the state\n  // to filter the items\n  // Also close the suggestion box, resetting the suggestion items and current options go to -1\n  updateLocalState({\n    searchTerm: event.currentTarget.textContent,\n    open: false,\n    suggestedItems: [],\n    currentOption: -1\n  });\n  updateParentState(event.target.textContent);\n};\n\n// Suggestion when mouse is over and option\nSuggestions.mouseOverSuggestion = (\n  updateLocalState,\n  indexNumber,\n) => () => {\n  // get the selected option and update the current option\n  updateLocalState({\n    currentOption: indexNumber\n  });\n};\n\n// When mouse leaves the suggestion reset the current option to -1\nSuggestions.mouseLeaveSuggestion = (updateLocalState) => () => {\n  updateLocalState({\n    currentOption: -1\n  });\n};\n// used together with mouse leave and enter for accesibility.\nSuggestions.hoverFocus = (event) => {\n  event.focus();\n};\n\nexport default Suggestions;\n"]},"metadata":{},"sourceType":"module"}