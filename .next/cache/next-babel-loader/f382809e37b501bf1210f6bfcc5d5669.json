{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\nvar __jsx = React.createElement;\n// @flow\nimport React from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport Details from \"./../Details/Details.js\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\"; // Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n// Declare our props with flow typed\n//type Props = State;\n\nconst Home = props => {\n  console.log(\"props\");\n  console.log(props.store); // destructuring our props for easy for write\n\n  const {\n    searchTerm,\n    gnomes,\n    orderByFilter,\n    currentPage\n  } = props; //const [data, setData] = useState([]);\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n\n  const itemsByPage = 15;\n  const gnomeNames = gnomes.map(gnome => gnome.name);\n  const pageGnomes = gnomeNames.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage); // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(gnome => gnome => gnome.name);\n\n  const getFirstName = arr => {\n    var arrCroped = [];\n\n    for (var a = 0; a < arr.length; a++) {\n      var corte = arr[a].indexOf(\" \");\n      arrCroped[a] = arr[a].substr(0, corte);\n    }\n\n    return arrCroped;\n  };\n\n  const justRenderedPageNames = getFirstName(pageGnomes); //console.log(justRenderedPageNames)\n\n  const parseToService = arrToFormat => {\n    var arrayFormated = [];\n\n    for (var b = 0; b < arrToFormat.length; b++) {\n      //var corte = arr[a].indexOf(\" \");\n      arrayFormated[b] = \"name[]=\" + arrToFormat[b] + \"&\";\n    } //arrayFormated.toString().replace('T', '&').toString();\n    //arrayFormated.join(',').replace(/,/g, '&').split();\n    //arrayFormated.toString().replace(\",\",\"&\")\n\n\n    return arrayFormated;\n  };\n\n  const format = parseToService(justRenderedPageNames).toString().replace(\", \", \"&\");\n  console.log(format.replace(\"&,\", \"&\"));\n\n  const callApi = format => {} //https://api.genderize.io/?\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  ;\n\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter).filter(gnome => {\n    // filter by profession\n    // If this gnome has this profession from redux state\n    // return the profession of this gnome\n    const isJob = gnome.professions.find(profession => profession === props.filterBy); // And then if this gnome know this profession return true\n    // Otherwise return false and ignore pass this gnome to the new array\n\n    const hasProfession = gnome.professions.some(profession => profession === isJob); // if filterBy state is all returns all gnomes if not return depending\n    // of the profession we're looking for\n\n    return props.filterBy === \"All\" ? gnome : hasProfession;\n  }).filter(gnome => {\n    // Filter name\n    // This comentted expression is for search exactly\n    // if match from the beginning of the string\n    // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n    // Get the gnomes that contains this bit of string within\n    const search = gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n    return search;\n  });\n  return __jsx(HomeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"BrastlewarkerS || Home\"), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n  .map(gnome => __jsx(Card, {\n    key: gnome.id,\n    gnome: gnome && gnome,\n    to: `../../containers/Details/Details?gnome=${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })) : __jsx(EmptyMsg, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"GNOME NOT FOUND\")), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }));\n}; // Inject Redux states to React Props\n// Thanks to react-redux connect method\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n} // This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\n\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","Helmet","connect","Filters","Card","Details","actions","HomeRow","HomeWrapper","EmptyMsg","Pagination","filterGnomesBy","Home","props","console","log","store","searchTerm","gnomes","orderByFilter","currentPage","itemsByPage","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","format","toString","replace","callApi","searchFilters","filter","isJob","professions","find","profession","filterBy","hasProfession","some","search","toLowerCase","getCurrentPage","Math","floor","id","split","join","mapStateToProps","state","orderBy"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport Details from \"./../Details/Details.js\"\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\";\n\n\n// Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n\n// Declare our props with flow typed\n//type Props = State;\n\nconst Home = (props) => {\n\n  console.log(\"props\")\n  console.log(props.store)\n  // destructuring our props for easy for write\n  const { searchTerm, gnomes, orderByFilter, currentPage } = props;\n\n    //const [data, setData] = useState([]);\n\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n  const itemsByPage = 15;\n\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n  itemsByPage * currentPage,\n  itemsByPage + currentPage * itemsByPage\n) // slice will control the pagination it calculate the quantity of items we want to show by the current page\npageGnomes.map(gnome => (\n  gnome => gnome.name\n))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n      return arrCroped;\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n  //console.log(justRenderedPageNames)\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n\n        //var corte = arr[a].indexOf(\" \");\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b]+\"&\";\n      }\n\n      //arrayFormated.toString().replace('T', '&').toString();\n      //arrayFormated.join(',').replace(/,/g, '&').split();\n      //arrayFormated.toString().replace(\",\",\"&\")\n\n      return arrayFormated;\n\n  }\n  const format = parseToService(justRenderedPageNames).toString().replace(\", \",\"&\");\n  console.log(format.replace(\"&,\",\"&\"));\n  const callApi = format =>{\n    //https://api.genderize.io/?\n\n  }\n\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n\n      // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n      // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n\n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>BrastlewarkerS || Home</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n      <HomeRow>\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n            .map(gnome => (\n              <Card\n                key={gnome.id}\n                gnome={gnome && gnome}\n                to={`../../containers/Details/Details?gnome=${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n\n              />\n            ))\n        ) : (\n          <EmptyMsg>GNOME NOT FOUND</EmptyMsg>\n        )}\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n    </HomeWrapper>\n  );\n};\n\n// Inject Redux states to React Props\n// Thanks to react-redux connect method\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n// This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}