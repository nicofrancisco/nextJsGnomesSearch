{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/routes/AsyncRoutes.jsx\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { Component } from \"react\"; // Declare Flow typed for Props\n\n/*type Props = {\n  props: mixed,\n  gnomeURL: string,\n  loadingPromise: Promise<{ default: Class<React.Component<*, *, *>> }>\n};*/\n// HOC for loading files from code-splitting\n// And split our bundle so the users will receive\n// just the code they need for load the page\n\nvar AsyncRoutes = /*#__PURE__*/function (_Component) {\n  _inherits(AsyncRoutes, _Component);\n\n  function AsyncRoutes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AsyncRoutes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AsyncRoutes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loaded: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"component\", null);\n\n    return _this;\n  }\n\n  _createClass(AsyncRoutes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // this is from webpack\n      // before DOM mounted this will receive our component\n      // which is exporting by default\n      // and get the data it need to render\n      this.props.loadingPromise.then(function (module) {\n        _this2.component = module[\"default\"];\n\n        _this2.setState({\n          loaded: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    // while loaded is false render the Spinner loader\n    // when component loaded pass this component with all its props\n    value: function render() {\n      if (!this.state.loaded) {\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"CARGANDO\");\n      }\n\n      return __jsx(this.component, _extends({}, this.props.props, {\n        gnomeURL: this.props.gnomeURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AsyncRoutes;\n}(Component);\n\nexport default AsyncRoutes;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/routes/AsyncRoutes.jsx"],"names":["React","Component","AsyncRoutes","loaded","props","loadingPromise","then","module","component","setState","state","gnomeURL"],"mappings":";;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA;;;;;AAMA;AACA;AACA;;IACMC,W;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,MAAM,EAAE;AADF,K;;gEAcI,I;;;;;;;wCAXQ;AAAA;;AAClB;AACA;AACA;AACA;AACA,WAAKC,KAAL,CAAWC,cAAX,CAA0BC,IAA1B,CAA+B,UAAAC,MAAM,EAAI;AACvC,QAAA,MAAI,CAACC,SAAL,GAAiBD,MAAM,WAAvB;;AACA,QAAA,MAAI,CAACE,QAAL,CAAc;AAAEN,UAAAA,MAAM,EAAE;AAAV,SAAd;AACD,OAHD;AAID;;;AAID;AACA;6BACS;AACP,UAAI,CAAC,KAAKO,KAAL,CAAWP,MAAhB,EAAwB;AACtB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,aACE,WAAM,SAAN,eAAoB,KAAKC,KAAL,CAAWA,KAA/B;AAAsC,QAAA,QAAQ,EAAE,KAAKA,KAAL,CAAWO,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;;;EA1BuBV,S;;AA6B1B,eAAeC,WAAf","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\n\n// Declare Flow typed for Props\n/*type Props = {\n  props: mixed,\n  gnomeURL: string,\n  loadingPromise: Promise<{ default: Class<React.Component<*, *, *>> }>\n};*/\n\n// HOC for loading files from code-splitting\n// And split our bundle so the users will receive\n// just the code they need for load the page\nclass AsyncRoutes extends Component {\n  state = {\n    loaded: false\n  };\n  componentDidMount() {\n    // this is from webpack\n    // before DOM mounted this will receive our component\n    // which is exporting by default\n    // and get the data it need to render\n    this.props.loadingPromise.then(module => {\n      this.component = module.default;\n      this.setState({ loaded: true });\n    });\n  }\n\n  component = null;\n\n  // while loaded is false render the Spinner loader\n  // when component loaded pass this component with all its props\n  render() {\n    if (!this.state.loaded) {\n      return <div>CARGANDO</div>;\n    }\n    return (\n      <this.component {...this.props.props} gnomeURL={this.props.gnomeURL} />\n    );\n  }\n}\n\nexport default AsyncRoutes;\n"]},"metadata":{},"sourceType":"module"}