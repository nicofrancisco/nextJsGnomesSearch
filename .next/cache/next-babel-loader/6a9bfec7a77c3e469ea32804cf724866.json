{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Main.js\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Link from 'next/link';\nimport { Provider } from \"react-redux\"; //import { hot } from \"react-hot-loader\";\n\nimport configure from \"./redux/store/configureStore\"; //import { BrowserRouter as Router } from \"react-router-dom\";\n\nimport * as actions from \"../redux/actions/actions\";\nimport Loading from \"../components/Loading/Loading\";\nimport Home from './Home/Home.js'; //import Routes from \"./../routes/routes\";\n\nconst store = configure(); // Declaring Flow types for Props\n\n/*type Props = {\n  fetchGnomes: Function,\n  gnomes: Array<Gnome>\n};*/\n// now pass the Types declaration to our class component\n\nclass Main extends Component {\n  componentDidMount() {\n    console.log(\"mount\"); // Get all the gnomes from the Api\n    // this is an action creator we got from the react-redux connect method\n\n    this.props.fetchGnomes();\n  } // If there is not gnomes in the gnomes state (got from Redux state)\n  // it will render Loading component first while we can receive all the inhabitants\n\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.props.gnomes.length === 0 ? __jsx(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }) : __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" Hola \", this.props.gnomes.length, __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(Home, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }))) //<Routes gnome={this.props.gnomes} />\n    )\n    /*<Router>\n     </Router>*/\n    ;\n  }\n\n} // mapStateToProps we pass this function to the connect method to\n// inject our Redux states as props in Main container\n\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Main);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Main.js"],"names":["React","Component","connect","Link","Provider","configure","actions","Loading","Home","store","Main","componentDidMount","console","log","props","fetchGnomes","render","gnomes","length","mapStateToProps","state"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,8BAAtB,C,CACA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,IAAP,MAAiB,gBAAjB,C,CACA;;AACA,MAAMC,KAAK,GAAGJ,SAAS,EAAvB,C,CACA;;AACA;;;;AAKA;;AACA,MAAMK,IAAN,SAAmBT,SAAnB,CAA6B;AAC3BU,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EADkB,CAElB;AACA;;AACA,SAAKC,KAAL,CAAWC,WAAX;AACD,GAN0B,CAQ3B;AACA;;;AACAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,KAA6B,CAA7B,GACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAY,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,MAA9B,EAEA,MAAC,QAAD;AAAU,MAAA,KAAK,EAAET,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFA,CAHD,CASC;AAVF;AAaA;;AAdF;AAkBD;;AA7B0B,C,CAgC7B;AACA;;;AACA,SAASU,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLH,IAAAA,MAAM,EAAEG,KAAK,CAACH;AADT,GAAP;AAGD;;AAED,eAAef,OAAO,CAACiB,eAAD,EAAkBb,OAAlB,CAAP,CAAkCI,IAAlC,CAAf","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Link from 'next/link';\nimport { Provider } from \"react-redux\";\n//import { hot } from \"react-hot-loader\";\nimport configure from \"./redux/store/configureStore\";\n//import { BrowserRouter as Router } from \"react-router-dom\";\nimport * as actions from \"../redux/actions/actions\";\nimport Loading from \"../components/Loading/Loading\";\nimport Home from './Home/Home.js';\n//import Routes from \"./../routes/routes\";\nconst store = configure();\n// Declaring Flow types for Props\n/*type Props = {\n  fetchGnomes: Function,\n  gnomes: Array<Gnome>\n};*/\n\n// now pass the Types declaration to our class component\nclass Main extends Component {\n  componentDidMount() {\n    console.log(\"mount\")\n    // Get all the gnomes from the Api\n    // this is an action creator we got from the react-redux connect method\n    this.props.fetchGnomes();\n  }\n\n  // If there is not gnomes in the gnomes state (got from Redux state)\n  // it will render Loading component first while we can receive all the inhabitants\n  render() {\n    return (\n      <div>\n      {this.props.gnomes.length === 0 ? (\n        <Loading />\n      ) : (\n        <div> Hola {this.props.gnomes.length}\n\n        <Provider store={store}>\n          <Home />\n        </Provider>\n        </div>\n        //<Routes gnome={this.props.gnomes} />\n      )}\n      </div>\n      /*<Router>\n\n      </Router>*/\n    );\n  }\n}\n\n// mapStateToProps we pass this function to the connect method to\n// inject our Redux states as props in Main container\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Main);\n"]},"metadata":{},"sourceType":"module"}