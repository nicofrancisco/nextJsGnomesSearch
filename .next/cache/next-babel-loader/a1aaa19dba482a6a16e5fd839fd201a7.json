{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nimport { itemsByPage } from \"./../../utils\";\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({\n  gnomes,\n  page,\n  updateGlobalState,\n  maxPages,\n  propsGender,\n  callGender,\n  updateDirection\n}) => //const callGenderLocal = callGender;\n//const propsGenderLocal = propsGender;\n__jsx(PaginationWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, __jsx(PaginationBtn, {\n  disableStyle: page <= 0,\n  page: page,\n  onClick: Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"Previous\"), __jsx(\"span\", {\n  className: \"current-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"Page: \", page + 1), __jsx(PaginationBtn, {\n  disableStyle: page >= maxPages,\n  page: page,\n  onClick: Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, \"Next\"));\n\nPagination.onClick = (gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection) => (event = event.currentTarget) => {\n  event.preventDefault();\n  window.scroll(null, 0); // Get the button name\n\n  const btnName = event.currentTarget.textContent.toLowerCase();\n  let format;\n\n  const setDirection = direction => {\n    let updatedPageNext = page + 1;\n    let updatedPagePrevious = page - 1;\n    const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n    const gnomeNames = gnomes.map(gnome => gnome.name);\n    const pageGnomes = gnomeNames.slice(itemsByPage * paginationDirection, itemsByPage + paginationDirection * itemsByPage);\n    pageGnomes.map(gnome => gnome => gnome.name);\n\n    const getFirstName = arr => {\n      var arrCroped = [];\n\n      for (var a = 0; a < arr.length; a++) {\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n\n      return arrCroped;\n    };\n\n    const justRenderedPageNames = getFirstName(pageGnomes);\n\n    const parseToService = arrToFormat => {\n      var arrayFormated = [];\n\n      for (var b = 0; b < arrToFormat.length; b++) {\n        arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n      }\n\n      return arrayFormated;\n    };\n\n    format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n  }; // if btnName is equal tot the nextButton value add a page until find the last page\n\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n\n    if (page !== maxPages) {\n      updateGlobalState(nextPage); //updateDirection(\"next\")\n\n      console.log(format);\n      setDirection(\"next\");\n      callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n\n    if (page > 0) {\n      updateGlobalState(previousPage); //updateDirection(\"previous\")\n\n      setDirection(\"previous\");\n      callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","PaginationWrapper","PaginationBtn","itemsByPage","nextButtonValue","previousButtonValue","Pagination","gnomes","page","updateGlobalState","maxPages","propsGender","callGender","updateDirection","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","format","setDirection","direction","updatedPageNext","updatedPagePrevious","paginationDirection","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","toString","replace","nextPage","console","log","previousPage","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nimport { itemsByPage } from \"./../../utils\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({ gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection }) => (\n  //const callGenderLocal = callGender;\n  //const propsGenderLocal = propsGender;\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (gnomes, page, updateGlobalState, maxPages, propsGender, callGender, updateDirection) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n\n  // Get the button name\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  let format;\n  const setDirection = (direction) =>{\n\n        let updatedPageNext = page + 1;\n        let updatedPagePrevious = page  - 1;\n        const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n\n        const gnomeNames = gnomes.map(gnome => gnome.name)\n        const pageGnomes = gnomeNames.slice(\n        itemsByPage * paginationDirection,\n        itemsByPage + paginationDirection * itemsByPage\n        )\n\n        pageGnomes.map(gnome => (\n          gnome => gnome.name\n        ))\n\n          const getFirstName = arr =>{\n            var arrCroped = [];\n              for(var a=0; a<arr.length; a++){\n\n                var corte = arr[a].indexOf(\" \");\n                arrCroped[a] = arr[a].substr(0, corte);\n              }\n              return arrCroped;\n          }\n\n          const justRenderedPageNames = getFirstName(pageGnomes);\n\n          const parseToService = arrToFormat =>{\n            var arrayFormated = [];\n\n              for(var b=0; b<arrToFormat.length; b++){\n                arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n              }\n\n              return arrayFormated;\n\n          }\n\n\n          format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  }\n\n  // if btnName is equal tot the nextButton value add a page until find the last page\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n      //updateDirection(\"next\")\n      console.log(format);\n      setDirection(\"next\")\n      callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n      //updateDirection(\"previous\")\n      setDirection(\"previous\")\n      callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}