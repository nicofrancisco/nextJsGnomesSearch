{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/routes/AsyncRoutes.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @flow\nimport React, { Component } from \"react\"; // Declare Flow typed for Props\n\n/*type Props = {\n  props: mixed,\n  gnomeURL: string,\n  loadingPromise: Promise<{ default: Class<React.Component<*, *, *>> }>\n};*/\n// HOC for loading files from code-splitting\n// And split our bundle so the users will receive\n// just the code they need for load the page\n\nclass AsyncRoutes extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loaded: false\n    });\n\n    _defineProperty(this, \"component\", null);\n  }\n\n  componentDidMount() {\n    // this is from webpack\n    // before DOM mounted this will receive our component\n    // which is exporting by default\n    // and get the data it need to render\n    this.props.loadingPromise.then(module => {\n      this.component = module.default;\n      this.setState({\n        loaded: true\n      });\n    });\n  }\n\n  // while loaded is false render the Spinner loader\n  // when component loaded pass this component with all its props\n  render() {\n    if (!this.state.loaded) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"CARGANDO\");\n    }\n\n    return __jsx(this.component, _extends({}, this.props.props, {\n      gnomeURL: this.props.gnomeURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default AsyncRoutes;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/routes/AsyncRoutes.jsx"],"names":["React","Component","AsyncRoutes","loaded","componentDidMount","props","loadingPromise","then","module","component","default","setState","render","state","gnomeURL"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA;;;;;AAMA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCAC1B;AACNE,MAAAA,MAAM,EAAE;AADF,KAD0B;;AAAA,uCAetB,IAfsB;AAAA;;AAIlCC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA;AACA,SAAKC,KAAL,CAAWC,cAAX,CAA0BC,IAA1B,CAA+BC,MAAM,IAAI;AACvC,WAAKC,SAAL,GAAiBD,MAAM,CAACE,OAAxB;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAHD;AAID;;AAID;AACA;AACAS,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKC,KAAL,CAAWV,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AACD,WACE,WAAM,SAAN,eAAoB,KAAKE,KAAL,CAAWA,KAA/B;AAAsC,MAAA,QAAQ,EAAE,KAAKA,KAAL,CAAWS,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAGD;;AA1BiC;;AA6BpC,eAAeZ,WAAf","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\n\n// Declare Flow typed for Props\n/*type Props = {\n  props: mixed,\n  gnomeURL: string,\n  loadingPromise: Promise<{ default: Class<React.Component<*, *, *>> }>\n};*/\n\n// HOC for loading files from code-splitting\n// And split our bundle so the users will receive\n// just the code they need for load the page\nclass AsyncRoutes extends Component {\n  state = {\n    loaded: false\n  };\n  componentDidMount() {\n    // this is from webpack\n    // before DOM mounted this will receive our component\n    // which is exporting by default\n    // and get the data it need to render\n    this.props.loadingPromise.then(module => {\n      this.component = module.default;\n      this.setState({ loaded: true });\n    });\n  }\n\n  component = null;\n\n  // while loaded is false render the Spinner loader\n  // when component loaded pass this component with all its props\n  render() {\n    if (!this.state.loaded) {\n      return <div>CARGANDO</div>;\n    }\n    return (\n      <this.component {...this.props.props} gnomeURL={this.props.gnomeURL} />\n    );\n  }\n}\n\nexport default AsyncRoutes;\n"]},"metadata":{},"sourceType":"module"}