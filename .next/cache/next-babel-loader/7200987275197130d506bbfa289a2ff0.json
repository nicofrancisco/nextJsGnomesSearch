{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nimport { itemsByPage } from \"./../../utils\";\nvar nextButtonValue = \"Next\";\nvar previousButtonValue = \"Previous\";\n\nvar Pagination = function Pagination(_ref) {\n  var gnomes = _ref.gnomes,\n      page = _ref.page,\n      updateGlobalState = _ref.updateGlobalState,\n      maxPages = _ref.maxPages,\n      propsGender = _ref.propsGender,\n      callGender = _ref.callGender;\n  return (//const callGenderLocal = callGender;\n    //const propsGenderLocal = propsGender;\n    __jsx(PaginationWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, __jsx(PaginationBtn, {\n      disableStyle: page <= 0,\n      page: page,\n      onClick: Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Previous\"), __jsx(\"span\", {\n      className: \"current-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Page: \", page + 1), __jsx(PaginationBtn, {\n      disableStyle: page >= maxPages,\n      page: page,\n      onClick: Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Next\"))\n  );\n};\n\nPagination.onClick = function (gnomes, page, updateGlobalState, maxPages, propsGender, callGender) {\n  return function () {\n    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : event.currentTarget;\n    event.preventDefault();\n    window.scroll(null, 0); // Get the button name\n\n    var btnName = event.currentTarget.textContent.toLowerCase();\n    var format;\n\n    var setDirection = function setDirection(direction) {\n      var updatedPageNext = page + 1;\n      var updatedPagePrevious = page - 1;\n      var paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n      var gnomeNames = gnomes.map(function (gnome) {\n        return gnome.name;\n      });\n      var pageGnomes = gnomeNames.slice(itemsByPage * paginationDirection, itemsByPage + paginationDirection * itemsByPage);\n      pageGnomes.map(function (gnome) {\n        return function (gnome) {\n          return gnome.name;\n        };\n      });\n\n      var getFirstName = function getFirstName(arr) {\n        var arrCroped = [];\n\n        for (var a = 0; a < arr.length; a++) {\n          var corte = arr[a].indexOf(\" \");\n          arrCroped[a] = arr[a].substr(0, corte);\n        }\n\n        return arrCroped;\n      };\n\n      var justRenderedPageNames = getFirstName(pageGnomes);\n\n      var parseToService = function parseToService(arrToFormat) {\n        var arrayFormated = [];\n\n        for (var b = 0; b < arrToFormat.length; b++) {\n          arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n        }\n\n        return arrayFormated;\n      };\n\n      format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n    };\n\n    if (btnName === nextButtonValue.toLowerCase()) {\n      var nextPage = page + 1;\n\n      if (page !== maxPages) {\n        updateGlobalState(nextPage);\n        setDirection(\"next\");\n        callGender(format);\n      }\n    } else if (btnName === previousButtonValue.toLowerCase()) {\n      var previousPage = page - 1;\n\n      if (page > 0) {\n        updateGlobalState(previousPage);\n        setDirection(\"previous\");\n        callGender(format);\n      }\n    }\n  };\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","PaginationWrapper","PaginationBtn","itemsByPage","nextButtonValue","previousButtonValue","Pagination","gnomes","page","updateGlobalState","maxPages","propsGender","callGender","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","format","setDirection","direction","updatedPageNext","updatedPagePrevious","paginationDirection","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","toString","replace","nextPage","previousPage","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nimport { itemsByPage } from \"./../../utils\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({ gnomes, page, updateGlobalState, maxPages, propsGender, callGender }) => (\n  //const callGenderLocal = callGender;\n  //const propsGenderLocal = propsGender;\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender )}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(gnomes, page, updateGlobalState, maxPages, propsGender, callGender )}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (gnomes, page, updateGlobalState, maxPages, propsGender, callGender ) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n\n  // Get the button name\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  let format;\n  const setDirection = (direction) =>{\n\n        let updatedPageNext = page + 1;\n        let updatedPagePrevious = page  - 1;\n        const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n\n        const gnomeNames = gnomes.map(gnome => gnome.name)\n        const pageGnomes = gnomeNames.slice(\n        itemsByPage * paginationDirection,\n        itemsByPage + paginationDirection * itemsByPage\n        )\n\n        pageGnomes.map(gnome => (\n          gnome => gnome.name\n        ))\n\n          const getFirstName = arr =>{\n            var arrCroped = [];\n              for(var a=0; a<arr.length; a++){\n\n                var corte = arr[a].indexOf(\" \");\n                arrCroped[a] = arr[a].substr(0, corte);\n              }\n              return arrCroped;\n          }\n\n          const justRenderedPageNames = getFirstName(pageGnomes);\n\n          const parseToService = arrToFormat =>{\n            var arrayFormated = [];\n\n              for(var b=0; b<arrToFormat.length; b++){\n                arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n              }\n\n              return arrayFormated;\n\n          }\n\n\n          format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  }\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n      setDirection(\"next\")\n      callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n      setDirection(\"previous\")\n      callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}