{"ast":null,"code":"// @flow\nimport axios from \"axios\";\nimport { gnomesAPI } from \"./../../functions\";\n/*import type { Gnome } from \"./flow-typed/types\";\nimport {\n  REQUEST_GNOMES,\n  SEARCH_TERM,\n  FILTER_BY_JOB,\n  ORDER_BY_FILTER,\n  CURRENT_PAGE\n} from \"./types\";*/\n\nexport const getGnomes = gnomes => ({\n  type: REQUEST_GNOMES,\n  payload: gnomes\n});\n/* eslint-disable */\n\nexport const fetchGnomes = () => async dispatch => {\n  const offlineGnomes = localStorage.getItem(\"gnomes\");\n\n  if (offlineGnomes) {\n    const gnomes = JSON.parse(offlineGnomes);\n    return dispatch(getGnomes(gnomes));\n  }\n\n  try {\n    const {\n      data: {\n        Brastlewark: gnomes\n      }\n    } = await axios.get(gnomesAPI);\n    const gnomesToJSON = JSON.stringify(gnomes);\n    localStorage.setItem(\"gnomes\", gnomesToJSON);\n    dispatch(getGnomes(gnomes));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/* eslint-enable */\n\nexport const getSearchText = searchTerm => ({\n  type: SEARCH_TERM,\n  payload: searchTerm\n});\nexport const filterByJob = job => ({\n  type: FILTER_BY_JOB,\n  payload: job\n});\nexport const updateOrderBy = order => ({\n  type: ORDER_BY_FILTER,\n  payload: order\n});\nexport const getCurrentPage = page => ({\n  type: CURRENT_PAGE,\n  payload: page\n}); //////////","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/redux/actions/actions.js"],"names":["axios","gnomesAPI","getGnomes","gnomes","type","REQUEST_GNOMES","payload","fetchGnomes","dispatch","offlineGnomes","localStorage","getItem","JSON","parse","data","Brastlewark","get","gnomesToJSON","stringify","setItem","err","Error","getSearchText","searchTerm","SEARCH_TERM","filterByJob","job","FILTER_BY_JOB","updateOrderBy","order","ORDER_BY_FILTER","getCurrentPage","page","CURRENT_PAGE"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA;;;;;;;;;AASA,OAAO,MAAMC,SAAS,GAAIC,MAAD,KAAa;AACpCC,EAAAA,IAAI,EAAEC,cAD8B;AAEpCC,EAAAA,OAAO,EAAEH;AAF2B,CAAb,CAAlB;AAKP;;AACA,OAAO,MAAMI,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACnD,QAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAtB;;AACA,MAAIF,aAAJ,EAAmB;AACjB,UAAMN,MAAM,GAAGS,IAAI,CAACC,KAAL,CAAWJ,aAAX,CAAf;AACA,WAAOD,QAAQ,CAACN,SAAS,CAACC,MAAD,CAAV,CAAf;AACD;;AAED,MAAI;AACF,UAAM;AAAEW,MAAAA,IAAI,EAAE;AAAEC,QAAAA,WAAW,EAAEZ;AAAf;AAAR,QAAoC,MAAMH,KAAK,CAACgB,GAAN,CAAUf,SAAV,CAAhD;AACA,UAAMgB,YAAY,GAAGL,IAAI,CAACM,SAAL,CAAef,MAAf,CAArB;AACAO,IAAAA,YAAY,CAACS,OAAb,CAAqB,QAArB,EAA+BF,YAA/B;AACAT,IAAAA,QAAQ,CAACN,SAAS,CAACC,MAAD,CAAV,CAAR;AACD,GALD,CAKE,OAAOiB,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,CAfM;AAiBP;;AACA,OAAO,MAAME,aAAa,GAAIC,UAAD,KAAiB;AAC5CnB,EAAAA,IAAI,EAAEoB,WADsC;AAE5ClB,EAAAA,OAAO,EAAEiB;AAFmC,CAAjB,CAAtB;AAKP,OAAO,MAAME,WAAW,GAAIC,GAAD,KAAU;AACnCtB,EAAAA,IAAI,EAAEuB,aAD6B;AAEnCrB,EAAAA,OAAO,EAAEoB;AAF0B,CAAV,CAApB;AAKP,OAAO,MAAME,aAAa,GAAIC,KAAD,KAAY;AACvCzB,EAAAA,IAAI,EAAE0B,eADiC;AAEvCxB,EAAAA,OAAO,EAAEuB;AAF8B,CAAZ,CAAtB;AAKP,OAAO,MAAME,cAAc,GAAIC,IAAD,KAAW;AACvC5B,EAAAA,IAAI,EAAE6B,YADiC;AAEvC3B,EAAAA,OAAO,EAAE0B;AAF8B,CAAX,CAAvB,C,CAMP","sourcesContent":["// @flow\nimport axios from \"axios\";\nimport { gnomesAPI } from \"./../../functions\";\n/*import type { Gnome } from \"./flow-typed/types\";\nimport {\n  REQUEST_GNOMES,\n  SEARCH_TERM,\n  FILTER_BY_JOB,\n  ORDER_BY_FILTER,\n  CURRENT_PAGE\n} from \"./types\";*/\n\nexport const getGnomes = (gnomes) => ({\n  type: REQUEST_GNOMES,\n  payload: gnomes\n});\n\n/* eslint-disable */\nexport const fetchGnomes = () => async (dispatch) => {\n  const offlineGnomes = localStorage.getItem(\"gnomes\");\n  if (offlineGnomes) {\n    const gnomes = JSON.parse(offlineGnomes);\n    return dispatch(getGnomes(gnomes));\n  }\n\n  try {\n    const { data: { Brastlewark: gnomes } } = await axios.get(gnomesAPI);\n    const gnomesToJSON = JSON.stringify(gnomes);\n    localStorage.setItem(\"gnomes\", gnomesToJSON);\n    dispatch(getGnomes(gnomes));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/* eslint-enable */\nexport const getSearchText = (searchTerm) => ({\n  type: SEARCH_TERM,\n  payload: searchTerm\n});\n\nexport const filterByJob = (job) => ({\n  type: FILTER_BY_JOB,\n  payload: job\n});\n\nexport const updateOrderBy = (order) => ({\n  type: ORDER_BY_FILTER,\n  payload: order\n});\n\nexport const getCurrentPage = (page) => ({\n  type: CURRENT_PAGE,\n  payload: page\n});\n\n\n//////////\n"]},"metadata":{},"sourceType":"module"}