{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({\n  page,\n  updateGlobalState,\n  maxPages,\n  propsGender,\n  callGender\n}) => //const callGenderLocal = callGender;\n//const propsGenderLocal = propsGender;\n__jsx(PaginationWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, __jsx(PaginationBtn, {\n  disableStyle: page <= 0,\n  page: page,\n  onClick: Pagination.onClick(updateGlobalState, page, propsGender, callGender),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Previous\"), __jsx(\"span\", {\n  className: \"current-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, \"Page: \", page + 1), __jsx(PaginationBtn, {\n  disableStyle: page >= maxPages,\n  page: page,\n  onClick: Pagination.onClick(updateGlobalState, page, maxPages, propsGender, callGender),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"Next\"));\n\nPagination.onClick = (updateGlobalState, page, maxPages, propsGender, callGender) => (event = event.currentTarget) => {\n  event.preventDefault(); // when page change take scroll to top\n\n  window.scroll(null, 0);\n  console.log(maxPages); //callGender(propsGender);\n  // Get the button name\n\n  const btnName = event.currentTarget.textContent.toLowerCase(); // if btnName is equal tot the nextButton value add a page until find the last page\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","PaginationWrapper","PaginationBtn","nextButtonValue","previousButtonValue","Pagination","page","updateGlobalState","maxPages","propsGender","callGender","onClick","event","currentTarget","preventDefault","window","scroll","console","log","btnName","textContent","toLowerCase","nextPage","previousPage","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,oBAAjD;AAGA,MAAMC,eAAe,GAAG,MAAxB;AACA,MAAMC,mBAAmB,GAAG,UAA5B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,iBAAR;AAA2BC,EAAAA,QAA3B;AAAqCC,EAAAA,WAArC;AAAkDC,EAAAA;AAAlD,CAAD,KACjB;AACA;AACA,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,aAAD;AACE,EAAA,YAAY,EAAEJ,IAAI,IAAI,CADxB;AAEE,EAAA,IAAI,EAAEA,IAFR;AAGE,EAAA,OAAO,EAAED,UAAU,CAACM,OAAX,CAAmBJ,iBAAnB,EAAsCD,IAAtC,EAA4CG,WAA5C,EAAyDC,UAAzD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAQE;AAAM,EAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAsCJ,IAAI,GAAG,CAA7C,CARF,EASE,MAAC,aAAD;AACE,EAAA,YAAY,EAAEA,IAAI,IAAIE,QADxB;AAEE,EAAA,IAAI,EAAEF,IAFR;AAGE,EAAA,OAAO,EAAED,UAAU,CAACM,OAAX,CAAmBJ,iBAAnB,EAAsCD,IAAtC,EAA4CE,QAA5C,EAAsDC,WAAtD,EAAmEC,UAAnE,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CAHF;;AAsBAL,UAAU,CAACM,OAAX,GAAqB,CAACJ,iBAAD,EAAoBD,IAApB,EAA0BE,QAA1B,EAAoCC,WAApC,EAAiDC,UAAjD,KAAgE,CACnFE,KAAK,GAAEA,KAAK,CAACC,aADsE,KAEhF;AACHD,EAAAA,KAAK,CAACE,cAAN,GADG,CAEH;;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ,EAJG,CAKH;AACA;;AACA,QAAMW,OAAO,GAAGP,KAAK,CAACC,aAAN,CAAoBO,WAApB,CAAgCC,WAAhC,EAAhB,CAPG,CASH;;AACA,MAAIF,OAAO,KAAKhB,eAAe,CAACkB,WAAhB,EAAhB,EAA+C;AAC7C;AACA,UAAMC,QAAQ,GAAGhB,IAAI,GAAG,CAAxB;;AACA,QAAIA,IAAI,KAAKE,QAAb,EAAuB;AACrBD,MAAAA,iBAAiB,CAACe,QAAD,CAAjB;AACD;AACF,GAND,MAMO,IAAIH,OAAO,KAAKf,mBAAmB,CAACiB,WAApB,EAAhB,EAAmD;AACxD;AACA,UAAME,YAAY,GAAGjB,IAAI,GAAG,CAA5B;;AACA,QAAIA,IAAI,GAAG,CAAX,EAAc;AACZC,MAAAA,iBAAiB,CAACgB,YAAD,CAAjB;AACD;AACF;AACF,CAzBD;;AA2BAlB,UAAU,CAACmB,YAAX,GAA0B;AACxBlB,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA,eAAeD,UAAf","sourcesContent":["import React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({ page, updateGlobalState, maxPages, propsGender, callGender }) => (\n  //const callGenderLocal = callGender;\n  //const propsGenderLocal = propsGender;\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page, propsGender, callGender)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page, maxPages, propsGender, callGender)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (updateGlobalState, page, maxPages, propsGender, callGender) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  // when page change take scroll to top\n  window.scroll(null, 0);\n  console.log(maxPages)\n  //callGender(propsGender);\n  // Get the button name\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  // if btnName is equal tot the nextButton value add a page until find the last page\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}