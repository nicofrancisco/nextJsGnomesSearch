{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\n\nvar __jsx = React.createElement;\n// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport Details from \"./../Details/Details.js\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\"; // Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n// Declare our props with flow typed\n//type Props = State;\n\nvar Home = function Home(props) {\n  console.log(\"props\");\n  console.log(props.store); // destructuring our props for easy for write\n\n  var searchTerm = props.searchTerm,\n      gnomes = props.gnomes,\n      orderByFilter = props.orderByFilter,\n      currentPage = props.currentPage;\n\n  var _useState = useState([]),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    _this.props.fetchGender(format); //\"name[]=Tobus&name[]=Fizkin&name[]=Malbin&name[]=Midwig&name[]=Malbin&name[]=Zedkin&name[]=Emmadette&name[]=Twizzle&name[]=Malbert&name[]=Kinthony&name[]=Cogwitz&name[]=Malbert&name[]=Ecki&name[]=Tobus&name[]=Emmadette\"\n\n    /*fetch(\"http://localhost:3001/links/\")\n      .then(response => response.json())\n      .then(data => setData(data));*/\n\n  }); //const [data, setData] = useState([]);\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n\n  var itemsByPage = 15;\n  var gnomeNames = gnomes.map(function (gnome) {\n    return gnome.name;\n  });\n  var pageGnomes = gnomeNames.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage); // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(function (gnome) {\n    return function (gnome) {\n      return gnome.name;\n    };\n  });\n\n  var getFirstName = function getFirstName(arr) {\n    var arrCroped = [];\n\n    for (var a = 0; a < arr.length; a++) {\n      var corte = arr[a].indexOf(\" \");\n      arrCroped[a] = arr[a].substr(0, corte);\n    }\n\n    return arrCroped;\n  };\n\n  var justRenderedPageNames = getFirstName(pageGnomes); //console.log(justRenderedPageNames)\n\n  var parseToService = function parseToService(arrToFormat) {\n    var arrayFormated = [];\n\n    for (var b = 0; b < arrToFormat.length; b++) {\n      //var corte = arr[a].indexOf(\" \");\n      arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n    } //arrayFormated.toString().replace('T', '&').toString();\n    //arrayFormated.join(',').replace(/,/g, '&').split();\n    //arrayFormated.toString().replace(\",\",\"&\")\n\n\n    return arrayFormated;\n  };\n\n  var format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n  console.log(format);\n\n  var callApi = function callApi(format) {} //\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  ;\n\n  var searchFilters = filterGnomesBy(gnomes, orderByFilter).filter(function (gnome) {\n    // filter by profession\n    // If this gnome has this profession from redux state\n    // return the profession of this gnome\n    var isJob = gnome.professions.find(function (profession) {\n      return profession === props.filterBy;\n    }); // And then if this gnome know this profession return true\n    // Otherwise return false and ignore pass this gnome to the new array\n\n    var hasProfession = gnome.professions.some(function (profession) {\n      return profession === isJob;\n    }); // if filterBy state is all returns all gnomes if not return depending\n    // of the profession we're looking for\n\n    return props.filterBy === \"All\" ? gnome : hasProfession;\n  }).filter(function (gnome) {\n    // Filter name\n    // This comentted expression is for search exactly\n    // if match from the beginning of the string\n    // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n    // Get the gnomes that contains this bit of string within\n    var search = gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n    return search;\n  });\n  return __jsx(HomeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"BrastlewarkerS || Home\"), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, __jsx(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n  .map(function (gnome) {\n    return __jsx(Card, {\n      key: gnome.id,\n      gnome: gnome && gnome,\n      to: \"../../containers/Details/Details?gnome=\".concat(gnome.id, \"-\").concat(gnome.name.split(\" \").join(\"-\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    });\n  }) : __jsx(EmptyMsg, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"GNOME NOT FOUND\")), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }));\n}; // Inject Redux states to React Props\n// Thanks to react-redux connect method\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    gender: state.gender,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n} // This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\n\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","useState","useEffect","Helmet","connect","Filters","Card","Details","actions","HomeRow","HomeWrapper","EmptyMsg","Pagination","filterGnomesBy","Home","props","console","log","store","searchTerm","gnomes","orderByFilter","currentPage","data","setData","fetchGender","format","itemsByPage","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","toString","replace","callApi","searchFilters","filter","isJob","professions","find","profession","filterBy","hasProfession","some","search","toLowerCase","getCurrentPage","Math","floor","id","split","join","mapStateToProps","state","gender","orderBy"],"mappings":"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","sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport Details from \"./../Details/Details.js\"\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\";\n\n\n// Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n\n// Declare our props with flow typed\n//type Props = State;\n\nconst Home = (props) => {\n\n  console.log(\"props\")\n  console.log(props.store)\n  // destructuring our props for easy for write\n  const { searchTerm, gnomes, orderByFilter, currentPage } = props;\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    this.props.fetchGender(format);\n    //\"name[]=Tobus&name[]=Fizkin&name[]=Malbin&name[]=Midwig&name[]=Malbin&name[]=Zedkin&name[]=Emmadette&name[]=Twizzle&name[]=Malbert&name[]=Kinthony&name[]=Cogwitz&name[]=Malbert&name[]=Ecki&name[]=Tobus&name[]=Emmadette\"\n    /*fetch(\"http://localhost:3001/links/\")\n      .then(response => response.json())\n      .then(data => setData(data));*/\n  });\n\n    //const [data, setData] = useState([]);\n\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n  const itemsByPage = 15;\n\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n  itemsByPage * currentPage,\n  itemsByPage + currentPage * itemsByPage\n) // slice will control the pagination it calculate the quantity of items we want to show by the current page\npageGnomes.map(gnome => (\n  gnome => gnome.name\n))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n      return arrCroped;\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n  //console.log(justRenderedPageNames)\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n\n        //var corte = arr[a].indexOf(\" \");\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n      }\n\n      //arrayFormated.toString().replace('T', '&').toString();\n      //arrayFormated.join(',').replace(/,/g, '&').split();\n      //arrayFormated.toString().replace(\",\",\"&\")\n\n      return arrayFormated;\n\n  }\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n  console.log(format)\n  const callApi = format =>{\n\n    //\n\n  }\n\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n\n      // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n      // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n\n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>BrastlewarkerS || Home</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n      <HomeRow>\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n            .map(gnome => (\n              <Card\n                key={gnome.id}\n                gnome={gnome && gnome}\n                to={`../../containers/Details/Details?gnome=${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n\n              />\n            ))\n        ) : (\n          <EmptyMsg>GNOME NOT FOUND</EmptyMsg>\n        )}\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n    </HomeWrapper>\n  );\n};\n\n// Inject Redux states to React Props\n// Thanks to react-redux connect method\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    gender: state.gender,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n// This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}