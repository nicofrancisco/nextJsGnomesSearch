{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/FrontEnd/nextJsGnomeSearch/pages/components/Pagination/Pagination.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport PaginationWrapper from \"./WrapperStyled\";\nimport PaginationBtn from \"./BtnStyled\";\nvar nextButtonValue = \"Next\";\nvar previousButtonValue = \"Previous\";\n\nvar Pagination = function Pagination(_ref) {\n  var page = _ref.page,\n      updateGlobalState = _ref.updateGlobalState,\n      maxPages = _ref.maxPages;\n  return (//const callGenderLocal = callGender;\n    //const propsGenderLocal = propsGender;\n    __jsx(PaginationWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, __jsx(PaginationBtn, {\n      disableStyle: page <= 0,\n      page: page,\n      onClick: Pagination.onClick(page, updateGlobalState, maxPages),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Previous\"), __jsx(\"span\", {\n      className: \"current-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Page: \", page + 1, \" / \", maxPages + 1), __jsx(PaginationBtn, {\n      disableStyle: page >= maxPages,\n      page: page,\n      onClick: Pagination.onClick(page, updateGlobalState, maxPages),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Next\"))\n  );\n};\n\nPagination.onClick = function (page, updateGlobalState, maxPages) {\n  return function () {\n    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : event.currentTarget;\n    event.preventDefault();\n    window.scroll(null, 0);\n    var btnName = event.currentTarget.textContent.toLowerCase();\n    /*let format;\n     const setDirection = (direction) =>{\n           let updatedPageNext = page + 1;\n          let updatedPagePrevious = page  - 1;\n          const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n           const gnomeNames = gnomes.map(gnome => gnome.name)\n          const pageGnomes = gnomeNames.slice(\n          itemsByPage * paginationDirection,\n          itemsByPage + paginationDirection * itemsByPage\n          )\n           pageGnomes.map(gnome => (\n            gnome => gnome.name\n          ))\n             const getFirstName = arr =>{\n              var arrCroped = [];\n                for(var a=0; a<arr.length; a++){\n                   var corte = arr[a].indexOf(\" \");\n                  arrCroped[a] = arr[a].substr(0, corte);\n                }\n                function removeDuplicates(array) {\n                  return array.filter((a, b) => array.indexOf(a) === b)\n                };\n                return removeDuplicates(arrCroped);\n            }\n             const justRenderedPageNames = getFirstName(pageGnomes);\n             const parseToService = arrToFormat =>{\n              var arrayFormated = [];\n                 for(var b=0; b<arrToFormat.length; b++){\n                  arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n                }\n                 return arrayFormated;\n             }\n             format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n     }*/\n\n    if (btnName === nextButtonValue.toLowerCase()) {\n      var nextPage = page + 1;\n\n      if (page !== maxPages) {\n        updateGlobalState(nextPage); //setDirection(\"next\")\n        //callGender(format);\n      }\n    } else if (btnName === previousButtonValue.toLowerCase()) {\n      var previousPage = page - 1;\n\n      if (page > 0) {\n        updateGlobalState(previousPage); //setDirection(\"previous\")\n        //callGender(format);\n      }\n    }\n  };\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/FrontEnd/nextJsGnomeSearch/pages/components/Pagination/Pagination.js"],"names":["React","PaginationWrapper","PaginationBtn","nextButtonValue","previousButtonValue","Pagination","page","updateGlobalState","maxPages","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","nextPage","previousPage","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,iBAA9B;AACA,OAAOC,aAAP,MAA0B,aAA1B;AAEA,IAAMC,eAAe,GAAG,MAAxB;AACA,IAAMC,mBAAmB,GAAG,UAA5B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,MAAQC,iBAAR,QAAQA,iBAAR;AAAA,MAA2BC,QAA3B,QAA2BA,QAA3B;AAAA,SACjB;AACA;AACA,UAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD;AACE,MAAA,YAAY,EAAEF,IAAI,IAAI,CADxB;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,OAAO,EAAED,UAAU,CAACI,OAAX,CAAmBH,IAAnB,EAAyBC,iBAAzB,EAA4CC,QAA5C,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAQE;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCF,IAAI,GAAG,CAA7C,SAAmDE,QAAQ,GAAG,CAA9D,CARF,EASE,MAAC,aAAD;AACE,MAAA,YAAY,EAAEF,IAAI,IAAIE,QADxB;AAEE,MAAA,IAAI,EAAEF,IAFR;AAGE,MAAA,OAAO,EAAED,UAAU,CAACI,OAAX,CAAmBH,IAAnB,EAAyBC,iBAAzB,EAA4CC,QAA5C,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAHiB;AAAA,CAAnB;;AAsBAH,UAAU,CAACI,OAAX,GAAqB,UAACH,IAAD,EAAOC,iBAAP,EAA0BC,QAA1B;AAAA,SAAuC,YAEvD;AAAA,QADHE,KACG,uEADIA,KAAK,CAACC,aACV;AACHD,IAAAA,KAAK,CAACE,cAAN;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB,CAApB;AAEA,QAAMC,OAAO,GAAGL,KAAK,CAACC,aAAN,CAAoBK,WAApB,CAAgCC,WAAhC,EAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,QAAIF,OAAO,KAAKZ,eAAe,CAACc,WAAhB,EAAhB,EAA+C;AAC7C,UAAMC,QAAQ,GAAGZ,IAAI,GAAG,CAAxB;;AACA,UAAIA,IAAI,KAAKE,QAAb,EAAuB;AACrBD,QAAAA,iBAAiB,CAACW,QAAD,CAAjB,CADqB,CAErB;AACA;AACD;AACF,KAPD,MAOO,IAAIH,OAAO,KAAKX,mBAAmB,CAACa,WAApB,EAAhB,EAAmD;AACxD,UAAME,YAAY,GAAGb,IAAI,GAAG,CAA5B;;AACA,UAAIA,IAAI,GAAG,CAAX,EAAc;AACZC,QAAAA,iBAAiB,CAACY,YAAD,CAAjB,CADY,CAEZ;AACA;AACD;AACF;AACF,GAvEoB;AAAA,CAArB;;AAyEAd,UAAU,CAACe,YAAX,GAA0B;AACxBd,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA,eAAeD,UAAf","sourcesContent":["import React from \"react\";\nimport PaginationWrapper from \"./WrapperStyled\";\nimport PaginationBtn from \"./BtnStyled\";\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({page, updateGlobalState, maxPages}) => (\n  //const callGenderLocal = callGender;\n  //const propsGenderLocal = propsGender;\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(page, updateGlobalState, maxPages)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1} / {maxPages + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(page, updateGlobalState, maxPages)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (page, updateGlobalState, maxPages) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  /*let format;\n\n  const setDirection = (direction) =>{\n\n        let updatedPageNext = page + 1;\n        let updatedPagePrevious = page  - 1;\n        const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n\n        const gnomeNames = gnomes.map(gnome => gnome.name)\n        const pageGnomes = gnomeNames.slice(\n        itemsByPage * paginationDirection,\n        itemsByPage + paginationDirection * itemsByPage\n        )\n\n        pageGnomes.map(gnome => (\n          gnome => gnome.name\n        ))\n\n          const getFirstName = arr =>{\n            var arrCroped = [];\n              for(var a=0; a<arr.length; a++){\n\n                var corte = arr[a].indexOf(\" \");\n                arrCroped[a] = arr[a].substr(0, corte);\n              }\n              function removeDuplicates(array) {\n                return array.filter((a, b) => array.indexOf(a) === b)\n              };\n              return removeDuplicates(arrCroped);\n          }\n\n          const justRenderedPageNames = getFirstName(pageGnomes);\n\n          const parseToService = arrToFormat =>{\n            var arrayFormated = [];\n\n              for(var b=0; b<arrToFormat.length; b++){\n                arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n              }\n\n              return arrayFormated;\n\n          }\n\n          format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  }*/\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n      //setDirection(\"next\")\n      //callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n      //setDirection(\"previous\")\n      //callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}