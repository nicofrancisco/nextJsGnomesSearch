{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\n// @flow\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\"; // Declare flow typed for Props\n\n/*type Props = {\n  page?: boolean,\n  updateGlobalState: Function, // we get updateGlobalState from parent component\n  maxPages: number\n};*/\n// Names we're using for our buttons\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({\n  page,\n  updateGlobalState,\n  maxPages\n}) => __jsx(PaginationWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, __jsx(PaginationBtn, {\n  disableStyle: page <= 0,\n  page: page,\n  onClick: Pagination.onClick(updateGlobalState, page),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, \"Previous\"), __jsx(\"span\", {\n  className: \"current-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, \"Page: \", page + 1), __jsx(PaginationBtn, {\n  disableStyle: page >= maxPages,\n  page: page,\n  onClick: Pagination.onClick(updateGlobalState, page, maxPages),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, \"Next\"));\n\nPagination.onClick = (updateGlobalState, page, maxPages) => (event = event.currentTarget) => {\n  event.preventDefault(); // when page change take scroll to top\n\n  window.scroll(null, 0); // Get the button name\n\n  const btnName = event.currentTarget.textContent.toLowerCase(); // if btnName is equal tot the nextButton value add a page until find the last page\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","PaginationWrapper","PaginationBtn","nextButtonValue","previousButtonValue","Pagination","page","updateGlobalState","maxPages","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","nextPage","previousPage","defaultProps"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,oBAAjD,C,CAEA;;AACA;;;;;AAMA;;AACA,MAAMC,eAAe,GAAG,MAAxB;AACA,MAAMC,mBAAmB,GAAG,UAA5B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,iBAAR;AAA2BC,EAAAA;AAA3B,CAAD,KACjB,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,aAAD;AACE,EAAA,YAAY,EAAEF,IAAI,IAAI,CADxB;AAEE,EAAA,IAAI,EAAEA,IAFR;AAGE,EAAA,OAAO,EAAED,UAAU,CAACI,OAAX,CAAmBF,iBAAnB,EAAsCD,IAAtC,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAQE;AAAM,EAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAsCA,IAAI,GAAG,CAA7C,CARF,EASE,MAAC,aAAD;AACE,EAAA,YAAY,EAAEA,IAAI,IAAIE,QADxB;AAEE,EAAA,IAAI,EAAEF,IAFR;AAGE,EAAA,OAAO,EAAED,UAAU,CAACI,OAAX,CAAmBF,iBAAnB,EAAsCD,IAAtC,EAA4CE,QAA5C,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CADF;;AAoBAH,UAAU,CAACI,OAAX,GAAqB,CAACF,iBAAD,EAAoBD,IAApB,EAA0BE,QAA1B,KAAuC,CAC1DE,KAAK,GAAEA,KAAK,CAACC,aAD6C,KAEvD;AACHD,EAAAA,KAAK,CAACE,cAAN,GADG,CAEH;;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB,CAApB,EAHG,CAIH;;AACA,QAAMC,OAAO,GAAGL,KAAK,CAACC,aAAN,CAAoBK,WAApB,CAAgCC,WAAhC,EAAhB,CALG,CAOH;;AACA,MAAIF,OAAO,KAAKZ,eAAe,CAACc,WAAhB,EAAhB,EAA+C;AAC7C;AACA,UAAMC,QAAQ,GAAGZ,IAAI,GAAG,CAAxB;;AACA,QAAIA,IAAI,KAAKE,QAAb,EAAuB;AACrBD,MAAAA,iBAAiB,CAACW,QAAD,CAAjB;AACD;AACF,GAND,MAMO,IAAIH,OAAO,KAAKX,mBAAmB,CAACa,WAApB,EAAhB,EAAmD;AACxD;AACA,UAAME,YAAY,GAAGb,IAAI,GAAG,CAA5B;;AACA,QAAIA,IAAI,GAAG,CAAX,EAAc;AACZC,MAAAA,iBAAiB,CAACY,YAAD,CAAjB;AACD;AACF;AACF,CAvBD;;AAyBAd,UAAU,CAACe,YAAX,GAA0B;AACxBd,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA,eAAeD,UAAf","sourcesContent":["// @flow\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\n\n// Declare flow typed for Props\n/*type Props = {\n  page?: boolean,\n  updateGlobalState: Function, // we get updateGlobalState from parent component\n  maxPages: number\n};*/\n\n// Names we're using for our buttons\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({ page, updateGlobalState, maxPages }) => (\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page, maxPages)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (updateGlobalState, page, maxPages) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  // when page change take scroll to top\n  window.scroll(null, 0);\n  // Get the button name\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  // if btnName is equal tot the nextButton value add a page until find the last page\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}