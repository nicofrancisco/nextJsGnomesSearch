{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoCompleteInput/AutoCompleteInput.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @flow\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Suggestions from \"./Suggestions/Suggestions\";\nimport { ContainerInput, InputSearch } from \"./AutoCompleteInputStyled\";\n\nclass AutoCompleteInput extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchTerm: \"\",\n      open: false,\n      suggestedItems: [],\n      currentOption: 0\n    });\n\n    _defineProperty(this, \"parseNamesFormat\", () => {\n      const items = this.props.autoCompleteItems.slice();\n      items.JSON.stringify(); //const filteredItems = items.filter(item => !valuesToRemove.includes(item))\n\n      console.log(items); // [\"a\", \"b\", \"e\", \"f\"]\n    });\n\n    _defineProperty(this, \"handleClickOutside\", event => {\n      // Control when user clicks outside the input components\n      // if the suggestions box is open when click uutside will close the\n      // box\n\n      /* eslint-disable */\n      // IT'S BEST PRACTICE TO USE REF INSTEAD\n      // I had to use finDOMNode method provisionally since\n      // i'm having problems implementing ref\n      const thisComponent = ReactDOM.findDOMNode(this);\n      /* eslint-enable */\n\n      if (!thisComponent || !thisComponent.contains(event.target)) {\n        this.setState({\n          open: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateLocalState\", state => this.setState(state));\n\n    _defineProperty(this, \"updateParentState\", searchTerm => {\n      this.props.parentUpdateState(searchTerm);\n    });\n  }\n\n  componentDidMount() {\n    // When component mount listen click event when click on document\n    document.addEventListener(\"click\", this.handleClickOutside);\n    this.parseNamesFormat();\n  }\n\n  componentWillUnmount() {\n    // Remove click event handler on document when component unmounts\n    document.removeEventListener(\"click\", this.handleClickOutside);\n  }\n\n  render() {\n    const {\n      searchTerm,\n      open\n    } = this.state;\n    return __jsx(ContainerInput, {\n      className: \"autocomplete\",\n      showLabel: this.props.showLabel,\n      htmlFor: this.props.stateName,\n      maxWidth: this.props.maxWidth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.props.labelName.length > 0 && __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \" \", this.props.labelName, \" \"), __jsx(InputSearch, {\n      autoComplete: \"off\",\n      type: \"text\",\n      id: this.props.stateName,\n      onChange: AutoCompleteInput.handleTermChange(this.updateLocalState, this.updateParentState, this.props.updateCurrentPage, this.props.autoCompleteItems, this.props.maxSuggests, this.props.includeSearchTerm),\n      onFocus: AutoCompleteInput.handleFocusInput(this.updateLocalState, searchTerm, this.updateParentState),\n      onKeyDown: AutoCompleteInput.handleCloseAutoComplete(this.updateLocalState, this.state, this.updateParentState, this.props.updateCurrentPage),\n      value: searchTerm,\n      placeholder: this.props.placeholder,\n      open: open && searchTerm.length > 0 ? open : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), __jsx(Suggestions, _extends({\n      open: open,\n      maxWidth: this.props.maxWidth,\n      updateLocalState: this.updateLocalState,\n      updateParentState: this.updateParentState\n    }, this.state, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n\n} // this approach on declaring events handlers improves\n// Readability and maintainance also improve time loading\n// since the class and components will be read first by\n// the browser engine - also it's the unique reference for all\n// others components which would need this\n// Handling onChange event\n// it will receive data to update the parent state\n\n\n_defineProperty(AutoCompleteInput, \"defaultProps\", {\n  maxSuggests: 5,\n  maxWidth: \"300px\",\n  includeSearchTerm: false,\n  labelName: \"\",\n  showLabel: false,\n  placeholder: \"\"\n});\n\nAutoCompleteInput.handleTermChange = (updateLocalState, updateParentState, updateCurrentPage, autoCompleteItems, maxSuggests, includeSearchTerm) => event => {\n  // Differences between e.target and e.currentTarget\n  // target = element that triggered event. or in other words\n  // it could be whatever that's actualy clicked on. It can vary, as this\n  // can be within an element that the event was bound to\n  // currentTarget = element that listens to event.\n  // currentTarget is the element you actually bound the event to.\n  // This will never change.\n  // Since i accessed to the DOM element that's associated with the event handler\n  // I defined, i used currentTarget.\n  // Every time the user type a new letter the filter method\n  // Will detect matches with the names of every gnome in the array\n  const AutoCompleteList = autoCompleteItems.filter(autoCompleteItem => {\n    // If the search item is include within the array item this will show\n    // all the options which includes the search items\n    if (includeSearchTerm) {\n      return autoCompleteItem.toLowerCase().indexOf(event.target.value.toLowerCase()) >= 0;\n    } // By default the autocomplete input will show only the options which\n    // search term starts and includes with the search term\n\n\n    return autoCompleteItem.toLowerCase().search(event.target.value.toLowerCase()) === 0;\n  }).splice(0, maxSuggests); // Control how many suggestions will be show\n\n  updateLocalState({\n    searchTerm: event.currentTarget.value,\n    // update the controlled component\n    open: AutoCompleteList.length !== 0,\n    // If there is not a match close the suggestion box\n    suggestedItems: AutoCompleteList,\n    // return an array of all suggestions\n    currentOption: -1 // disable suggest the first item, to enable switch it to 0\n\n  }); // update global state of the parent search term\n\n  updateParentState(event.currentTarget.value); // When search for a new letter pagination will reset to page 1\n\n  updateCurrentPage(0);\n}; // handle on Focus\n\n\nAutoCompleteInput.handleFocusInput = (updateLocalState, searchTerm, updateParentState) => event => {\n  event.preventDefault(); // if there are at least one letter in the input and if it is focused\n  // open the box with suggestions\n\n  const open = searchTerm > 0;\n  updateLocalState({\n    open\n  });\n  updateParentState(searchTerm);\n}; // handle on keydown\n\n\nAutoCompleteInput.handleCloseAutoComplete = (updateLocalState, state, updateParentState, updateCurrentPage) => event => {\n  // When user press ESC key\n  // Close the suggestion box and reset all suggestions\n  if (event.which === 27) {\n    updateLocalState({\n      open: false,\n      suggestedItems: []\n    });\n  } else if (event.keyCode === 13) {\n    // When Enter\n    // if there is a suggested option pass it to the state if not check if -1 and just send the current search term\n    // reset the suggestions and close the box and algo depending of the position\n    // of the current option it will return the suggested option or tbe search Term\n    // only if the current option is bigger or equal to 0 it will return the suggestion\n    const processSearch = state.currentOption === -1 ? state.searchTerm : state.suggestedItems[state.currentOption];\n    updateLocalState({\n      open: false,\n      searchTerm: processSearch,\n      suggestedItems: [],\n      currentOption: -1\n    }); // Get pagination to page 1\n\n    updateCurrentPage(0);\n    updateParentState(processSearch);\n  } else if (event.keyCode === 40) {\n    // When arrow up\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow up button it will decrease\n    // the suggestion options\n    // suggestion options cant be less than -1 so in this case\n    // when click up always returns -1\n    updateLocalState(prevState => {\n      const arrayItem = prevState.suggestedItems.length - 1;\n      const maxOption = prevState.currentOption < arrayItem ? prevState.currentOption + 1 : arrayItem;\n      return {\n        currentOption: maxOption\n      };\n    });\n  } else if (event.keyCode === 38) {\n    // When arrow down\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow down button it will increase\n    // the suggestion options\n    updateLocalState(prevState => {\n      // If not selected option return -1\n      const minOption = prevState.currentOption < 1 ? -1 : prevState.currentOption - 1;\n      return {\n        currentOption: minOption\n      };\n    });\n  } else if (event.keyCode === 9) {\n    updateLocalState({\n      currentOption: 0,\n      suggestedItems: [],\n      open: false\n    });\n  }\n};\n\nexport default AutoCompleteInput;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoCompleteInput/AutoCompleteInput.jsx"],"names":["React","Component","ReactDOM","Suggestions","ContainerInput","InputSearch","AutoCompleteInput","searchTerm","open","suggestedItems","currentOption","items","props","autoCompleteItems","slice","JSON","stringify","console","log","event","thisComponent","findDOMNode","contains","target","setState","state","parentUpdateState","componentDidMount","document","addEventListener","handleClickOutside","parseNamesFormat","componentWillUnmount","removeEventListener","render","showLabel","stateName","maxWidth","labelName","length","handleTermChange","updateLocalState","updateParentState","updateCurrentPage","maxSuggests","includeSearchTerm","handleFocusInput","handleCloseAutoComplete","placeholder","AutoCompleteList","filter","autoCompleteItem","toLowerCase","indexOf","value","search","splice","currentTarget","preventDefault","which","keyCode","processSearch","prevState","arrayItem","maxOption","minOption"],"mappings":"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","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Suggestions from \"./Suggestions/Suggestions\";\nimport { ContainerInput, InputSearch } from \"./AutoCompleteInputStyled\";\n\nclass AutoCompleteInput extends Component{\n  static defaultProps = {\n    maxSuggests: 5,\n    maxWidth: \"300px\",\n    includeSearchTerm: false,\n    labelName: \"\",\n    showLabel: false,\n    placeholder: \"\"\n  };\n\n  state = {\n    searchTerm: \"\",\n    open: false,\n    suggestedItems: [],\n    currentOption: 0\n  };\n\n  componentDidMount() {\n    // When component mount listen click event when click on document\n    document.addEventListener(\"click\", this.handleClickOutside);\n\n    this.parseNamesFormat();\n\n  }\n\n  componentWillUnmount() {\n    // Remove click event handler on document when component unmounts\n    document.removeEventListener(\"click\", this.handleClickOutside);\n  }\n\n  parseNamesFormat = () => {\n    const items = this.props.autoCompleteItems.slice();\n    items.JSON.stringify()\n    //const filteredItems = items.filter(item => !valuesToRemove.includes(item))\n\n    console.log(items)\n    // [\"a\", \"b\", \"e\", \"f\"]\n\n\n\n  };\n\n\n  handleClickOutside = event => {\n    // Control when user clicks outside the input components\n    // if the suggestions box is open when click uutside will close the\n    // box\n    /* eslint-disable */\n    // IT'S BEST PRACTICE TO USE REF INSTEAD\n    // I had to use finDOMNode method provisionally since\n    // i'm having problems implementing ref\n    const thisComponent = ReactDOM.findDOMNode(this);\n    /* eslint-enable */\n    if (!thisComponent || !thisComponent.contains(event.target)) {\n      this.setState({\n        open: false\n      });\n    }\n  };\n\n  // control the entire state control of this component\n  updateLocalState = (state) => this.setState(state);\n  // This will update parent state which control this component\n  updateParentState = (searchTerm) => {\n    this.props.parentUpdateState(searchTerm);\n  };\n\n  render() {\n    const { searchTerm, open } = this.state;\n    return (\n      <ContainerInput\n        className=\"autocomplete\"\n        showLabel={this.props.showLabel}\n        htmlFor={this.props.stateName}\n        maxWidth={this.props.maxWidth}\n      >\n        {this.props.labelName.length > 0 && (\n          <span> {this.props.labelName} </span>\n        )}\n        <InputSearch\n          autoComplete=\"off\"\n          type=\"text\"\n          id={this.props.stateName}\n          onChange={AutoCompleteInput.handleTermChange(\n            this.updateLocalState,\n            this.updateParentState,\n            this.props.updateCurrentPage,\n            this.props.autoCompleteItems,\n            this.props.maxSuggests,\n            this.props.includeSearchTerm\n          )}\n          onFocus={AutoCompleteInput.handleFocusInput(\n            this.updateLocalState,\n            searchTerm,\n            this.updateParentState\n          )}\n          onKeyDown={AutoCompleteInput.handleCloseAutoComplete(\n            this.updateLocalState,\n            this.state,\n            this.updateParentState,\n            this.props.updateCurrentPage\n          )}\n          value={searchTerm}\n          placeholder={this.props.placeholder}\n          open={open && searchTerm.length > 0 ? open : false}\n        />\n        <Suggestions\n          open={open}\n          maxWidth={this.props.maxWidth}\n          updateLocalState={this.updateLocalState}\n          updateParentState={this.updateParentState}\n          {...this.state}\n          {...this.props}\n        />\n      </ContainerInput>\n    );\n  }\n}\n\n// this approach on declaring events handlers improves\n// Readability and maintainance also improve time loading\n// since the class and components will be read first by\n// the browser engine - also it's the unique reference for all\n// others components which would need this\n\n// Handling onChange event\n// it will receive data to update the parent state\nAutoCompleteInput.handleTermChange = (\n  updateLocalState,\n  updateParentState,\n  updateCurrentPage,\n  autoCompleteItems,\n  maxSuggests,\n  includeSearchTerm,\n) => (event) => {\n  // Differences between e.target and e.currentTarget\n  // target = element that triggered event. or in other words\n  // it could be whatever that's actualy clicked on. It can vary, as this\n  // can be within an element that the event was bound to\n  // currentTarget = element that listens to event.\n  // currentTarget is the element you actually bound the event to.\n  // This will never change.\n\n  // Since i accessed to the DOM element that's associated with the event handler\n  // I defined, i used currentTarget.\n\n  // Every time the user type a new letter the filter method\n  // Will detect matches with the names of every gnome in the array\n  const AutoCompleteList = autoCompleteItems\n    .filter(autoCompleteItem => {\n      // If the search item is include within the array item this will show\n      // all the options which includes the search items\n      if (includeSearchTerm) {\n        return (\n          autoCompleteItem\n            .toLowerCase()\n            .indexOf(event.target.value.toLowerCase()) >= 0\n        );\n      }\n      // By default the autocomplete input will show only the options which\n      // search term starts and includes with the search term\n      return (\n        autoCompleteItem\n          .toLowerCase()\n          .search(event.target.value.toLowerCase()) === 0\n      );\n    })\n    .splice(0, maxSuggests);\n    // Control how many suggestions will be show\n\n  updateLocalState({\n    searchTerm: event.currentTarget.value, // update the controlled component\n    open: AutoCompleteList.length !== 0, // If there is not a match close the suggestion box\n    suggestedItems: AutoCompleteList, // return an array of all suggestions\n    currentOption: -1 // disable suggest the first item, to enable switch it to 0\n  });\n  // update global state of the parent search term\n  updateParentState(event.currentTarget.value);\n  // When search for a new letter pagination will reset to page 1\n  updateCurrentPage(0);\n};\n\n// handle on Focus\nAutoCompleteInput.handleFocusInput = (\n  updateLocalState,\n  searchTerm,\n  updateParentState,\n) => (event) => {\n  event.preventDefault();\n  // if there are at least one letter in the input and if it is focused\n  // open the box with suggestions\n  const open = searchTerm > 0;\n\n  updateLocalState({\n    open\n  });\n  updateParentState(searchTerm);\n};\n\n// handle on keydown\nAutoCompleteInput.handleCloseAutoComplete = (\n  updateLocalState,\n  state,\n  updateParentState,\n  updateCurrentPage,\n) => (event,) => {\n  // When user press ESC key\n  // Close the suggestion box and reset all suggestions\n  if (event.which === 27) {\n    updateLocalState({\n      open: false,\n      suggestedItems: []\n    });\n  } else if (event.keyCode === 13) {\n    // When Enter\n    // if there is a suggested option pass it to the state if not check if -1 and just send the current search term\n    // reset the suggestions and close the box and algo depending of the position\n    // of the current option it will return the suggested option or tbe search Term\n    // only if the current option is bigger or equal to 0 it will return the suggestion\n    const processSearch =\n      state.currentOption === -1\n        ? state.searchTerm\n        : state.suggestedItems[state.currentOption];\n    updateLocalState({\n      open: false,\n      searchTerm: processSearch,\n      suggestedItems: [],\n      currentOption: -1\n    });\n    // Get pagination to page 1\n    updateCurrentPage(0);\n    updateParentState(processSearch);\n  } else if (event.keyCode === 40) {\n    // When arrow up\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow up button it will decrease\n    // the suggestion options\n    // suggestion options cant be less than -1 so in this case\n    // when click up always returns -1\n    updateLocalState(prevState => {\n      const arrayItem = prevState.suggestedItems.length - 1;\n      const maxOption =\n        prevState.currentOption < arrayItem\n          ? prevState.currentOption + 1\n          : arrayItem;\n      return {\n        currentOption: maxOption\n      };\n    });\n  } else if (event.keyCode === 38) {\n        // When arrow down\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow down button it will increase\n    // the suggestion options\n\n    updateLocalState(prevState => {\n      // If not selected option return -1\n      const minOption =\n        prevState.currentOption < 1 ? -1 : prevState.currentOption - 1;\n      return {\n        currentOption: minOption\n      };\n    });\n  } else if (event.keyCode === 9) {\n    updateLocalState({\n      currentOption: 0,\n      suggestedItems: [],\n      open: false\n    });\n  }\n};\n\nexport default AutoCompleteInput;\n"]},"metadata":{},"sourceType":"module"}