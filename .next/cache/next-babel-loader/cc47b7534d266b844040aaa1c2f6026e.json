{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\"; // Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n// Declare our props with flow typed\n//type Props = State;\n\nconst Home = props => {\n  // destructuring our props for easy for write\n  const {\n    searchTerm,\n    gnomes,\n    orderByFilter,\n    currentPage\n  } = useState({\n    gnomes: [],\n    searchTerm: \"\",\n    filterBy: \"All\",\n    orderBy: \"\",\n    currentPage: 0\n  }); //const [data, setData] = useState([]);\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n\n  const itemsByPage = 9;\n  console.log(\"PROPS\");\n  console.log(gnomes); // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n\n  /*const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n       // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n       // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n  */\n\n  return __jsx(HomeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"BrastlewarkerS || Home\"), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n  .map(gnome => __jsx(Card, {\n    key: gnome.id,\n    gnome: gnome && gnome,\n    to: `/gnomes/${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })) : __jsx(EmptyMsg, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"GNOME NOT FOUND\")), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n}; // Inject Redux states to React Props\n// Thanks to react-redux connect method\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n} // This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\n\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","useState","useEffect","Helmet","connect","Filters","Card","actions","HomeRow","HomeWrapper","EmptyMsg","Pagination","filterGnomesBy","Home","props","searchTerm","gnomes","orderByFilter","currentPage","filterBy","orderBy","itemsByPage","console","log","searchFilters","length","slice","map","gnome","id","name","split","join","getCurrentPage","Math","floor","mapStateToProps","state"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAO,KAAKC,OAAZ,MAAyB,+BAAzB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,sCAArB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,SAASC,cAAT,QAA+B,mBAA/B,C,CAEA;AACA;AAEA;AACA;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,aAAtB;AAAqCC,IAAAA;AAArC,MAAqDjB,QAAQ,CAAC;AAACe,IAAAA,MAAM,EAAE,EAAT;AAAaD,IAAAA,UAAU,EAAE,EAAzB;AAA6BI,IAAAA,QAAQ,EAAE,KAAvC;AAA8CC,IAAAA,OAAO,EAAE,EAAvD;AAA2DF,IAAAA,WAAW,EAAE;AAAxE,GAAD,CAAnE,CAFsB,CAIpB;;AAGF;;;;;;;;AAOA,QAAMG,WAAW,GAAG,CAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAjBsB,CAoBtB;AACA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAM,IAAA,GAAG,EAAC,eAAV;AAA0B,IAAA,IAAI,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,OAAO,EAAC,8IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,EAYE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,aAAa,CAACC,MAAd,GAAuB,CAAvB,GACCD,aAAa,CACVE,KADH,CAEIL,WAAW,GAAGH,WAFlB,EAGIG,WAAW,GAAGH,WAAW,GAAGG,WAHhC,EAII;AAJJ,GAKGM,GALH,CAKOC,KAAK,IACR,MAAC,IAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACC,EADb;AAEE,IAAA,KAAK,EAAED,KAAK,IAAIA,KAFlB;AAGE,IAAA,EAAE,EAAG,WAAUA,KAAK,CAACC,EAAG,IAAGD,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiB,GAAjB,EAAsBC,IAAtB,CAA2B,GAA3B,CAAgC,EAH7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADD,GAcC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAfJ,CAZF,EA8BE,MAAC,UAAD;AACE,IAAA,IAAI,EAAEd,WADR;AAEE,IAAA,iBAAiB,EAAEJ,KAAK,CAACmB,cAF3B;AAGE,IAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWX,aAAa,CAACC,MAAd,GAAuBJ,WAAlC,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,CADF;AAsCD,CA3FD,C,CA6FA;AACA;;;AACA,SAASe,eAAT,CAAyBC,KAAzB,EAAgC;AAC9Bf,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACA,SAAO;AACLtB,IAAAA,UAAU,EAAEsB,KAAK,CAACtB,UADb;AAELC,IAAAA,MAAM,EAAEqB,KAAK,CAACrB,MAFT;AAGLG,IAAAA,QAAQ,EAAEkB,KAAK,CAAClB,QAHX;AAILF,IAAAA,aAAa,EAAEoB,KAAK,CAACjB,OAJhB;AAKLF,IAAAA,WAAW,EAAEmB,KAAK,CAACnB;AALd,GAAP;AAOD,C,CACD;AACA;AACA;;;AACA,eAAed,OAAO,CAACgC,eAAD,EAAkB7B,OAAlB,CAAP,CAAkCM,IAAlC,CAAf","sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\";\n\n// Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n\n// Declare our props with flow typed\n//type Props = State;\n\nconst Home = (props) => {\n  // destructuring our props for easy for write\n  const { searchTerm, gnomes, orderByFilter, currentPage } = useState({gnomes: [], searchTerm: \"\", filterBy: \"All\", orderBy: \"\", currentPage: 0});\n\n    //const [data, setData] = useState([]);\n\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n  const itemsByPage = 9;\n\n  console.log(\"PROPS\");\n  console.log(gnomes);\n\n\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  /*const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n\n      // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n      // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n  */\n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>BrastlewarkerS || Home</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <HomeRow>\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n            .map(gnome => (\n              <Card\n                key={gnome.id}\n                gnome={gnome && gnome}\n                to={`/gnomes/${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n              />\n            ))\n        ) : (\n          <EmptyMsg>GNOME NOT FOUND</EmptyMsg>\n        )}\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n    </HomeWrapper>\n  );\n};\n\n// Inject Redux states to React Props\n// Thanks to react-redux connect method\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n// This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}