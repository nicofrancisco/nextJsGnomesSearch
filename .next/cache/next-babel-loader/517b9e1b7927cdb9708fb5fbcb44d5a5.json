{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Filters/Filters.jsx\";\nvar __jsx = React.createElement;\n// @flow\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormSearch, FormRow } from \"./FiltersStyled\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport AutoCompleteInput from \"./../../components/AutoCompleteInput/AutoCompleteInput\";\nimport Select from \"./../../components/Select/Select\";\nimport OrderByBTN from \"./../../components/OrderByBTN/OrderByBTN\"; //import type { Gnome } from \"./../../../flow-typed/types\";\n\n/*type Props = {\n  getSearchText: Function,\n  filterByJob: Function,\n  getCurrentPage: Function,\n  gnomes: Array<Gnome>\n};*/\n\nvar Filters = function Filters(props) {\n  // Generate and array of all the names of the gnomes which will\n  // Be used for autocomplete input component to show suggestions\n  var gnomeNames = props.gnomes.map(function (gnome) {\n    return gnome.name;\n  }); // Create an array with all the professions that has the gnomes\n  // in the town\n\n  var getJobs = [];\n  /* eslint-disable */\n\n  /* FIND A BETTER WAY TO DO THIS */\n  // Get all the professions of the gnomes\n\n  for (var i = 0; i < props.gnomes.length; i++) {\n    getJobs = getJobs.concat(props.gnomes[i].professions);\n  }\n  /* eslint-enable */\n  // clearing the array removing all repetitive item\n\n\n  var jobs = _Array$from(new _Set(getJobs));\n\n  return __jsx(FormSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(FormRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Oldest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Youngest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Heaviest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Lightest\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Most Popular\"), __jsx(OrderByBTN, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Less Popular\"), __jsx(\"div\", {\n    className: \"profession\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Search by Profession\")), __jsx(FormRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"filterWrapp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Select, {\n    items: jobs && jobs,\n    defaultValue: \"All Professions\",\n    stateName: \"filteBy\",\n    maxWidth: \"100%\",\n    updateState: props.filterByJob,\n    updateCurrentPage: props.getCurrentPage,\n    state: props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(AutoCompleteInput, {\n    stateName: \"searchTerm\",\n    updateCurrentPage: props.getCurrentPage,\n    parentUpdateState: props.getSearchText,\n    autoCompleteItems: gnomeNames,\n    maxSuggests: 5,\n    maxWidth: \"100%\",\n    labelName: \"Search Gnome Name: \",\n    placeholder: \"Search by Name\",\n    includeSearchTerm: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Filters);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Filters/Filters.jsx"],"names":["React","connect","FormSearch","FormRow","actions","AutoCompleteInput","Select","OrderByBTN","Filters","props","gnomeNames","gnomes","map","gnome","name","getJobs","i","length","concat","professions","jobs","filterByJob","getCurrentPage","getSearchText","mapStateToProps","state"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,iBAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,wDAA9B;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,UAAP,MAAuB,0CAAvB,C,CACA;;AAEA;;;;;;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB;AACA;AACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiB,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAtB,CAAnB,CAHyB,CAKzB;AACA;;AACA,MAAIC,OAAO,GAAG,EAAd;AACA;;AACA;AACA;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACE,MAAN,CAAaM,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,IAAAA,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAeT,KAAK,CAACE,MAAN,CAAaK,CAAb,EAAgBG,WAA/B,CAAV;AACD;AACD;AAEA;;;AACA,MAAMC,IAAI,GAAG,YAAW,SAAQL,OAAR,CAAX,CAAb;;AAEA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,EAME,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,EAOE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAQE;AAAK,IAAA,SAAS,EAAE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BARF,CADF,EAWI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAEK,IAAI,IAAIA,IADjB;AAEE,IAAA,YAAY,EAAC,iBAFf;AAGE,IAAA,SAAS,EAAC,SAHZ;AAIE,IAAA,QAAQ,EAAC,MAJX;AAKE,IAAA,WAAW,EAAEX,KAAK,CAACY,WALrB;AAME,IAAA,iBAAiB,EAAEZ,KAAK,CAACa,cAN3B;AAOE,IAAA,KAAK,EAAEb,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,MAAC,iBAAD;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,iBAAiB,EAAEA,KAAK,CAACa,cAF3B;AAGE,IAAA,iBAAiB,EAAEb,KAAK,CAACc,aAH3B;AAIE,IAAA,iBAAiB,EAAEb,UAJrB;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,QAAQ,EAAC,MANX;AAOE,IAAA,SAAS,EAAC,qBAPZ;AAQE,IAAA,WAAW,EAAC,gBARd;AASE,IAAA,iBAAiB,MATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADA,CAXJ,CADF;AAsCD,CA1DD;;AA4DA,SAASc,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLd,IAAAA,MAAM,EAAEc,KAAK,CAACd;AADT,GAAP;AAGD;;AAED,eAAeV,OAAO,CAACuB,eAAD,EAAkBpB,OAAlB,CAAP,CAAkCI,OAAlC,CAAf","sourcesContent":["// @flow\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormSearch, FormRow } from \"./FiltersStyled\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport AutoCompleteInput from \"./../../components/AutoCompleteInput/AutoCompleteInput\";\nimport Select from \"./../../components/Select/Select\";\nimport OrderByBTN from \"./../../components/OrderByBTN/OrderByBTN\";\n//import type { Gnome } from \"./../../../flow-typed/types\";\n\n/*type Props = {\n  getSearchText: Function,\n  filterByJob: Function,\n  getCurrentPage: Function,\n  gnomes: Array<Gnome>\n};*/\n\nconst Filters = (props) => {\n  // Generate and array of all the names of the gnomes which will\n  // Be used for autocomplete input component to show suggestions\n  const gnomeNames = props.gnomes.map(gnome => gnome.name);\n\n  // Create an array with all the professions that has the gnomes\n  // in the town\n  let getJobs = [];\n  /* eslint-disable */\n  /* FIND A BETTER WAY TO DO THIS */\n  // Get all the professions of the gnomes\n\n  for (let i = 0; i < props.gnomes.length; i++) {\n    getJobs = getJobs.concat(props.gnomes[i].professions);\n  }\n  /* eslint-enable */\n\n  // clearing the array removing all repetitive item\n  const jobs = Array.from(new Set(getJobs));\n\n  return (\n    <FormSearch>\n      <FormRow>\n\n        <OrderByBTN>Oldest</OrderByBTN>\n        <OrderByBTN>Youngest</OrderByBTN>\n        <OrderByBTN>Heaviest</OrderByBTN>\n        <OrderByBTN>Lightest</OrderByBTN>\n        <OrderByBTN>Most Popular</OrderByBTN>\n        <OrderByBTN>Less Popular</OrderByBTN>\n        <div className={\"profession\"}>Search by Profession</div>\n        </FormRow>\n        <FormRow>\n        <div className={\"filterWrapp\"}>\n          <Select\n            items={jobs && jobs}\n            defaultValue=\"All Professions\"\n            stateName=\"filteBy\"\n            maxWidth=\"100%\"\n            updateState={props.filterByJob}\n            updateCurrentPage={props.getCurrentPage}\n            state={props}\n          />\n          <AutoCompleteInput\n            stateName=\"searchTerm\"\n            updateCurrentPage={props.getCurrentPage}\n            parentUpdateState={props.getSearchText}\n            autoCompleteItems={gnomeNames}\n            maxSuggests={5}\n            maxWidth=\"100%\"\n            labelName=\"Search Gnome Name: \"\n            placeholder=\"Search by Name\"\n            includeSearchTerm\n          />\n        </div>\n      </FormRow>\n    </FormSearch>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Filters);\n"]},"metadata":{},"sourceType":"module"}