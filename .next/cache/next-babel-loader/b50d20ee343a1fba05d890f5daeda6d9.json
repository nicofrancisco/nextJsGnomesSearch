{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Main.js\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\"; //import { BrowserRouter as Router } from \"react-router-dom\";\n\nimport * as actions from \"../redux/actions/actions\";\nimport Loading from \"../components/Loading/Loading\"; //import Routes from \"./../routes/routes\";\n// Declaring Flow types for Props\n\n/*type Props = {\n  fetchGnomes: Function,\n  gnomes: Array<Gnome>\n};*/\n// now pass the Types declaration to our class component\n\nclass Main extends Component {\n  componentDidMount() {\n    // Get all the gnomes from the Api\n    // this is an action creator we got from the react-redux connect method\n    this.props.fetchGnomes();\n  } // If there is not gnomes in the gnomes state (got from Redux state)\n  // it will render Loading component first while we can receive all the inhabitants\n\n\n  render() {\n    return __jsx(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"/*\", this.props.gnomes.length === 0 ? __jsx(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }) : __jsx(Routes, {\n      gnome: this.props.gnomes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), \"*/\");\n  }\n\n} // mapStateToProps we pass this function to the connect method to\n// inject our Redux states as props in Main container\n\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Main);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Main.js"],"names":["React","Component","connect","actions","Loading","Main","componentDidMount","props","fetchGnomes","render","gnomes","length","mapStateToProps","state"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,OAAP,MAAoB,+BAApB,C,CACA;AAEA;;AACA;;;;AAKA;;AACA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAC3BK,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA,SAAKC,KAAL,CAAWC,WAAX;AACD,GAL0B,CAO3B;AACA;;;AACAC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,KAA6B,CAA7B,GACD,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,GAGD,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWG,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,OADF;AASD;;AAnB0B,C,CAsB7B;AACA;;;AACA,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLH,IAAAA,MAAM,EAAEG,KAAK,CAACH;AADT,GAAP;AAGD;;AAED,eAAeR,OAAO,CAACU,eAAD,EAAkBT,OAAlB,CAAP,CAAkCE,IAAlC,CAAf","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n//import { BrowserRouter as Router } from \"react-router-dom\";\nimport * as actions from \"../redux/actions/actions\";\nimport Loading from \"../components/Loading/Loading\";\n//import Routes from \"./../routes/routes\";\n\n// Declaring Flow types for Props\n/*type Props = {\n  fetchGnomes: Function,\n  gnomes: Array<Gnome>\n};*/\n\n// now pass the Types declaration to our class component\nclass Main extends Component {\n  componentDidMount() {\n    // Get all the gnomes from the Api\n    // this is an action creator we got from the react-redux connect method\n    this.props.fetchGnomes();\n  }\n\n  // If there is not gnomes in the gnomes state (got from Redux state)\n  // it will render Loading component first while we can receive all the inhabitants\n  render() {\n    return (\n      <Router>\n        /*{this.props.gnomes.length === 0 ? (\n          <Loading />\n        ) : (\n          <Routes gnome={this.props.gnomes} />\n        )}*/\n      </Router>\n    );\n  }\n}\n\n// mapStateToProps we pass this function to the connect method to\n// inject our Redux states as props in Main container\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Main);\n"]},"metadata":{},"sourceType":"module"}