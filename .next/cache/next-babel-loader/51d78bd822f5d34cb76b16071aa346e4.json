{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoCompleteInput/AutoCompleteInput.jsx\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Suggestions from \"./Suggestions/Suggestions\";\nimport { ContainerInput, InputSearch } from \"./AutoCompleteInputStyled\"; // Declare Props Types\n\n/*type Props = {\n  autoCompleteItems: Array<string>,\n  maxSuggests?: number,\n  maxWidth?: string,\n  includeSearchTerm?: boolean,\n  labelName?: string,\n  showLabel?: boolean,\n  placeholder?: string,\n  stateName: string,\n  parentUpdateState: Function,\n  updateCurrentPage: Function\n};*/\n// Declare states flow types\n\n/*type State = {\n  searchTerm: string,\n  open: boolean,\n  suggestedItems: Array<string>,\n  currentOption: number\n};*/\n\nvar AutoCompleteInput = /*#__PURE__*/function (_Component) {\n  _inherits(AutoCompleteInput, _Component);\n\n  function AutoCompleteInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AutoCompleteInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoCompleteInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      searchTerm: \"\",\n      open: false,\n      suggestedItems: [],\n      currentOption: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickOutside\", function (event) {\n      // Control when user clicks outside the input components\n      // if the suggestions box is open when click uutside will close the\n      // box\n\n      /* eslint-disable */\n      // IT'S BEST PRACTICE TO USE REF INSTEAD\n      // I had to use finDOMNode method provisionally since\n      // i'm having problems implementing ref\n      var thisComponent = ReactDOM.findDOMNode(_assertThisInitialized(_this));\n      /* eslint-enable */\n\n      if (!thisComponent || !thisComponent.contains(event.target)) {\n        _this.setState({\n          open: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateLocalState\", function (state) {\n      return _this.setState(state);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateParentState\", function (searchTerm) {\n      _this.props.parentUpdateState(searchTerm);\n    });\n\n    return _this;\n  }\n\n  _createClass(AutoCompleteInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // When component mount listen click event when click on document\n      document.addEventListener(\"click\", this.handleClickOutside);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Remove click event handler on document when component unmounts\n      document.removeEventListener(\"click\", this.handleClickOutside);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          searchTerm = _this$state.searchTerm,\n          open = _this$state.open;\n      return __jsx(ContainerInput, {\n        className: \"autocomplete\",\n        showLabel: this.props.showLabel,\n        htmlFor: this.props.stateName,\n        maxWidth: this.props.maxWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.props.labelName.length > 0 && __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \" \", this.props.labelName, \" \"), __jsx(InputSearch, {\n        autoComplete: \"off\",\n        type: \"text\",\n        id: this.props.stateName,\n        onChange: AutoCompleteInput.handleTermChange(this.updateLocalState, this.updateParentState, this.props.updateCurrentPage, this.props.autoCompleteItems, this.props.maxSuggests, this.props.includeSearchTerm),\n        onFocus: AutoCompleteInput.handleFocusInput(this.updateLocalState, searchTerm, this.updateParentState),\n        onKeyDown: AutoCompleteInput.handleCloseAutoComplete(this.updateLocalState, this.state, this.updateParentState, this.props.updateCurrentPage),\n        value: searchTerm,\n        placeholder: this.props.placeholder,\n        open: open && searchTerm.length > 0 ? open : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), __jsx(Suggestions, _extends({\n        open: open,\n        maxWidth: this.props.maxWidth,\n        updateLocalState: this.updateLocalState,\n        updateParentState: this.updateParentState\n      }, this.state, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AutoCompleteInput;\n}(Component); // this approach on declaring events handlers improves\n// Readability and maintainance also improve time loading\n// since the class and components will be read first by\n// the browser engine - also it's the unique reference for all\n// others components which would need this\n// Handling onChange event\n// it will receive data to update the parent state\n\n\n_defineProperty(AutoCompleteInput, \"defaultProps\", {\n  maxSuggests: 4,\n  maxWidth: \"300px\",\n  includeSearchTerm: false,\n  labelName: \"\",\n  showLabel: false,\n  placeholder: \"\"\n});\n\nAutoCompleteInput.handleTermChange = function (updateLocalState, updateParentState, updateCurrentPage, autoCompleteItems, maxSuggests, includeSearchTerm) {\n  return function (event) {\n    // Differences between e.target and e.currentTarget\n    // target = element that triggered event. or in other words\n    // it could be whatever that's actualy clicked on. It can vary, as this\n    // can be within an element that the event was bound to\n    // currentTarget = element that listens to event.\n    // currentTarget is the element you actually bound the event to.\n    // This will never change.\n    // Since i accessed to the DOM element that's associated with the event handler\n    // I defined, i used currentTarget.\n    // Every time the user type a new letter the filter method\n    // Will detect matches with the names of every gnome in the array\n    var AutoCompleteList = autoCompleteItems.filter(function (autoCompleteItem) {\n      // If the search item is include within the array item this will show\n      // all the options which includes the search items\n      if (includeSearchTerm) {\n        return autoCompleteItem.toLowerCase().indexOf(event.target.value.toLowerCase()) >= 0;\n      } // By default the autocomplete input will show only the options which\n      // search term starts and includes with the search term\n\n\n      return autoCompleteItem.toLowerCase().search(event.target.value.toLowerCase()) === 0;\n    }).splice(0, maxSuggests); // Control how many suggestions will be show\n\n    updateLocalState({\n      searchTerm: event.currentTarget.value,\n      // update the controlled component\n      open: AutoCompleteList.length !== 0,\n      // If there is not a match close the suggestion box\n      suggestedItems: AutoCompleteList,\n      // return an array of all suggestions\n      currentOption: -1 // disable suggest the first item, to enable switch it to 0\n\n    }); // update global state of the parent search term\n\n    updateParentState(event.currentTarget.value); // When search for a new letter pagination will reset to page 1\n\n    updateCurrentPage(0);\n  };\n}; // handle on Focus\n\n\nAutoCompleteInput.handleFocusInput = function (updateLocalState, searchTerm, updateParentState) {\n  return function (event) {\n    event.preventDefault(); // if there are at least one letter in the input and if it is focused\n    // open the box with suggestions\n\n    var open = searchTerm > 0;\n    updateLocalState({\n      open: open\n    });\n    updateParentState(searchTerm);\n  };\n}; // handle on keydown\n\n\nAutoCompleteInput.handleCloseAutoComplete = function (updateLocalState, state, updateParentState, updateCurrentPage) {\n  return function (event) {\n    // When user press ESC key\n    // Close the suggestion box and reset all suggestions\n    if (event.which === 27) {\n      updateLocalState({\n        open: false,\n        suggestedItems: []\n      });\n    } else if (event.keyCode === 13) {\n      // When Enter\n      // if there is a suggested option pass it to the state if not check if -1 and just send the current search term\n      // reset the suggestions and close the box and algo depending of the position\n      // of the current option it will return the suggested option or tbe search Term\n      // only if the current option is bigger or equal to 0 it will return the suggestion\n      var processSearch = state.currentOption === -1 ? state.searchTerm : state.suggestedItems[state.currentOption];\n      updateLocalState({\n        open: false,\n        searchTerm: processSearch,\n        suggestedItems: [],\n        currentOption: -1\n      }); // Get pagination to page 1\n\n      updateCurrentPage(0);\n      updateParentState(processSearch);\n    } else if (event.keyCode === 40) {\n      // When arrow up\n      // select and option controlled by keyboard\n      // everytime the user clicks arrow up button it will decrease\n      // the suggestion options\n      // suggestion options cant be less than -1 so in this case\n      // when click up always returns -1\n      updateLocalState(function (prevState) {\n        var arrayItem = prevState.suggestedItems.length - 1;\n        var maxOption = prevState.currentOption < arrayItem ? prevState.currentOption + 1 : arrayItem;\n        return {\n          currentOption: maxOption\n        };\n      });\n    } else if (event.keyCode === 38) {\n      // When arrow down\n      // select and option controlled by keyboard\n      // everytime the user clicks arrow down button it will increase\n      // the suggestion options\n      updateLocalState(function (prevState) {\n        // If not selected option return -1\n        var minOption = prevState.currentOption < 1 ? -1 : prevState.currentOption - 1;\n        return {\n          currentOption: minOption\n        };\n      });\n    } else if (event.keyCode === 9) {\n      updateLocalState({\n        currentOption: 0,\n        suggestedItems: [],\n        open: false\n      });\n    }\n  };\n};\n\nexport default AutoCompleteInput;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/AutoCompleteInput/AutoCompleteInput.jsx"],"names":["React","Component","ReactDOM","Suggestions","ContainerInput","InputSearch","AutoCompleteInput","searchTerm","open","suggestedItems","currentOption","event","thisComponent","findDOMNode","contains","target","setState","state","props","parentUpdateState","document","addEventListener","handleClickOutside","removeEventListener","showLabel","stateName","maxWidth","labelName","length","handleTermChange","updateLocalState","updateParentState","updateCurrentPage","autoCompleteItems","maxSuggests","includeSearchTerm","handleFocusInput","handleCloseAutoComplete","placeholder","AutoCompleteList","filter","autoCompleteItem","toLowerCase","indexOf","value","search","splice","currentTarget","preventDefault","which","keyCode","processSearch","prevState","arrayItem","maxOption","minOption"],"mappings":"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","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Suggestions from \"./Suggestions/Suggestions\";\nimport { ContainerInput, InputSearch } from \"./AutoCompleteInputStyled\";\n\n// Declare Props Types\n/*type Props = {\n  autoCompleteItems: Array<string>,\n  maxSuggests?: number,\n  maxWidth?: string,\n  includeSearchTerm?: boolean,\n  labelName?: string,\n  showLabel?: boolean,\n  placeholder?: string,\n  stateName: string,\n  parentUpdateState: Function,\n  updateCurrentPage: Function\n};*/\n\n// Declare states flow types\n/*type State = {\n  searchTerm: string,\n  open: boolean,\n  suggestedItems: Array<string>,\n  currentOption: number\n};*/\n\nclass AutoCompleteInput extends Component{\n  static defaultProps = {\n    maxSuggests: 4,\n    maxWidth: \"300px\",\n    includeSearchTerm: false,\n    labelName: \"\",\n    showLabel: false,\n    placeholder: \"\"\n  };\n\n  state = {\n    searchTerm: \"\",\n    open: false,\n    suggestedItems: [],\n    currentOption: 0\n  };\n\n  componentDidMount() {\n    // When component mount listen click event when click on document\n    document.addEventListener(\"click\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    // Remove click event handler on document when component unmounts\n    document.removeEventListener(\"click\", this.handleClickOutside);\n  }\n\n  handleClickOutside = event => {\n    // Control when user clicks outside the input components\n    // if the suggestions box is open when click uutside will close the\n    // box\n    /* eslint-disable */\n    // IT'S BEST PRACTICE TO USE REF INSTEAD\n    // I had to use finDOMNode method provisionally since\n    // i'm having problems implementing ref\n    const thisComponent = ReactDOM.findDOMNode(this);\n    /* eslint-enable */\n    if (!thisComponent || !thisComponent.contains(event.target)) {\n      this.setState({\n        open: false\n      });\n    }\n  };\n\n  // control the entire state control of this component\n  updateLocalState = (state) => this.setState(state);\n  // This will update parent state which control this component\n  updateParentState = (searchTerm) => {\n    this.props.parentUpdateState(searchTerm);\n  };\n\n  render() {\n    const { searchTerm, open } = this.state;\n    return (\n      <ContainerInput\n        className=\"autocomplete\"\n        showLabel={this.props.showLabel}\n        htmlFor={this.props.stateName}\n        maxWidth={this.props.maxWidth}\n      >\n        {this.props.labelName.length > 0 && (\n          <span> {this.props.labelName} </span>\n        )}\n        <InputSearch\n          autoComplete=\"off\"\n          type=\"text\"\n          id={this.props.stateName}\n          onChange={AutoCompleteInput.handleTermChange(\n            this.updateLocalState,\n            this.updateParentState,\n            this.props.updateCurrentPage,\n            this.props.autoCompleteItems,\n            this.props.maxSuggests,\n            this.props.includeSearchTerm\n          )}\n          onFocus={AutoCompleteInput.handleFocusInput(\n            this.updateLocalState,\n            searchTerm,\n            this.updateParentState\n          )}\n          onKeyDown={AutoCompleteInput.handleCloseAutoComplete(\n            this.updateLocalState,\n            this.state,\n            this.updateParentState,\n            this.props.updateCurrentPage\n          )}\n          value={searchTerm}\n          placeholder={this.props.placeholder}\n          open={open && searchTerm.length > 0 ? open : false}\n        />\n        <Suggestions\n          open={open}\n          maxWidth={this.props.maxWidth}\n          updateLocalState={this.updateLocalState}\n          updateParentState={this.updateParentState}\n          {...this.state}\n          {...this.props}\n        />\n      </ContainerInput>\n    );\n  }\n}\n\n// this approach on declaring events handlers improves\n// Readability and maintainance also improve time loading\n// since the class and components will be read first by\n// the browser engine - also it's the unique reference for all\n// others components which would need this\n\n// Handling onChange event\n// it will receive data to update the parent state\nAutoCompleteInput.handleTermChange = (\n  updateLocalState,\n  updateParentState,\n  updateCurrentPage,\n  autoCompleteItems,\n  maxSuggests,\n  includeSearchTerm,\n) => (event) => {\n  // Differences between e.target and e.currentTarget\n  // target = element that triggered event. or in other words\n  // it could be whatever that's actualy clicked on. It can vary, as this\n  // can be within an element that the event was bound to\n  // currentTarget = element that listens to event.\n  // currentTarget is the element you actually bound the event to.\n  // This will never change.\n\n  // Since i accessed to the DOM element that's associated with the event handler\n  // I defined, i used currentTarget.\n\n  // Every time the user type a new letter the filter method\n  // Will detect matches with the names of every gnome in the array\n  const AutoCompleteList = autoCompleteItems\n    .filter(autoCompleteItem => {\n      // If the search item is include within the array item this will show\n      // all the options which includes the search items\n      if (includeSearchTerm) {\n        return (\n          autoCompleteItem\n            .toLowerCase()\n            .indexOf(event.target.value.toLowerCase()) >= 0\n        );\n      }\n      // By default the autocomplete input will show only the options which\n      // search term starts and includes with the search term\n      return (\n        autoCompleteItem\n          .toLowerCase()\n          .search(event.target.value.toLowerCase()) === 0\n      );\n    })\n    .splice(0, maxSuggests);\n    // Control how many suggestions will be show\n\n  updateLocalState({\n    searchTerm: event.currentTarget.value, // update the controlled component\n    open: AutoCompleteList.length !== 0, // If there is not a match close the suggestion box\n    suggestedItems: AutoCompleteList, // return an array of all suggestions\n    currentOption: -1 // disable suggest the first item, to enable switch it to 0\n  });\n  // update global state of the parent search term\n  updateParentState(event.currentTarget.value);\n  // When search for a new letter pagination will reset to page 1\n  updateCurrentPage(0);\n};\n\n// handle on Focus\nAutoCompleteInput.handleFocusInput = (\n  updateLocalState,\n  searchTerm,\n  updateParentState,\n) => (event) => {\n  event.preventDefault();\n  // if there are at least one letter in the input and if it is focused\n  // open the box with suggestions\n  const open = searchTerm > 0;\n\n  updateLocalState({\n    open\n  });\n  updateParentState(searchTerm);\n};\n\n// handle on keydown\nAutoCompleteInput.handleCloseAutoComplete = (\n  updateLocalState,\n  state,\n  updateParentState,\n  updateCurrentPage,\n) => (event,) => {\n  // When user press ESC key\n  // Close the suggestion box and reset all suggestions\n  if (event.which === 27) {\n    updateLocalState({\n      open: false,\n      suggestedItems: []\n    });\n  } else if (event.keyCode === 13) {\n    // When Enter\n    // if there is a suggested option pass it to the state if not check if -1 and just send the current search term\n    // reset the suggestions and close the box and algo depending of the position\n    // of the current option it will return the suggested option or tbe search Term\n    // only if the current option is bigger or equal to 0 it will return the suggestion\n    const processSearch =\n      state.currentOption === -1\n        ? state.searchTerm\n        : state.suggestedItems[state.currentOption];\n    updateLocalState({\n      open: false,\n      searchTerm: processSearch,\n      suggestedItems: [],\n      currentOption: -1\n    });\n    // Get pagination to page 1\n    updateCurrentPage(0);\n    updateParentState(processSearch);\n  } else if (event.keyCode === 40) {\n    // When arrow up\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow up button it will decrease\n    // the suggestion options\n    // suggestion options cant be less than -1 so in this case\n    // when click up always returns -1\n    updateLocalState(prevState => {\n      const arrayItem = prevState.suggestedItems.length - 1;\n      const maxOption =\n        prevState.currentOption < arrayItem\n          ? prevState.currentOption + 1\n          : arrayItem;\n      return {\n        currentOption: maxOption\n      };\n    });\n  } else if (event.keyCode === 38) {\n        // When arrow down\n    // select and option controlled by keyboard\n    // everytime the user clicks arrow down button it will increase\n    // the suggestion options\n\n    updateLocalState(prevState => {\n      // If not selected option return -1\n      const minOption =\n        prevState.currentOption < 1 ? -1 : prevState.currentOption - 1;\n      return {\n        currentOption: minOption\n      };\n    });\n  } else if (event.keyCode === 9) {\n    updateLocalState({\n      currentOption: 0,\n      suggestedItems: [],\n      open: false\n    });\n  }\n};\n\nexport default AutoCompleteInput;\n"]},"metadata":{},"sourceType":"module"}