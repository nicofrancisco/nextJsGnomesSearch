{"ast":null,"code":"export const itemsByPage = 15;\nexport const gnomesAPI = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\nexport const genderGuessingAPI = \"https://api.genderize.io/?\"; // need to pay to use the genderize.io service for bulk process\n\n/*export function getCurrentPageGenderFormat (gnomes, currentPage){\n\n  let updatedPage = currentPage;\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n    itemsByPage * updatedPage,\n    itemsByPage + updatedPage * itemsByPage\n  )\n\n  pageGnomes.map(gnome => (\n    gnome => gnome.name\n  ))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n\n      function removeDuplicates(array) {\n        return array.filter((a, b) => array.indexOf(a) === b)\n      };\n      return removeDuplicates(arrCroped);\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n      }\n\n      return arrayFormated;\n\n  }\n\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  return format;\n}*/\n\nexport function getFirstNames(gnomes, currentPage) {\n  let updatedPage = currentPage;\n  const gnomeNames = gnomes.map(gnome => gnome.name);\n  const pageGnomes = gnomeNames.slice(itemsByPage * updatedPage, itemsByPage + updatedPage * itemsByPage);\n  pageGnomes.map(gnome => gnome => gnome.name);\n\n  const getFirstName = arr => {\n    var arrCroped = [];\n\n    for (var a = 0; a < arr.length; a++) {\n      var corte = arr[a].indexOf(\" \");\n      arrCroped[a] = arr[a].substr(0, corte);\n    }\n\n    function removeDuplicates(array) {\n      return array.filter((a, b) => array.indexOf(a) === b);\n    }\n\n    ;\n    return removeDuplicates(arrCroped);\n  };\n\n  const onlyNames = getFirstName(pageGnomes);\n  return onlyNames;\n}\nexport function convertColorsToHex(color) {\n  const colorName = color.toLowerCase();\n  var hexColor = \"\";\n\n  switch (colorName) {\n    case \"red\":\n      hexColor = \"#f66969\";\n      break;\n\n    case \"pink\":\n      hexColor = \"#f6a2c0\";\n      break;\n\n    case \"green\":\n      hexColor = \"#80e8d4\";\n      break;\n\n    case \"black\":\n      hexColor = \"#4d5253\";\n      break;\n\n    case \"gray\":\n      hexColor = \"#8d9395\";\n      break;\n\n    default:\n      hexColor = \"#000\";\n      break;\n  }\n\n  return hexColor;\n}\nexport function filterGnomesBy(array, orderByFilter) {\n  if (!Array.isArray(array)) {\n    return null;\n  }\n\n  if (orderByFilter.toLowerCase() === \"Oldest\".toLowerCase()) {\n    return array.sort((a, b) => b.age - a.age);\n  } else if (orderByFilter.toLowerCase() === \"Youngest\".toLowerCase()) {\n    return array.sort((a, b) => a.age - b.age);\n  } else if (orderByFilter.toLowerCase() === \"Heaviest\".toLowerCase()) {\n    return array.sort((a, b) => b.weight - a.weight);\n  } else if (orderByFilter.toLowerCase() === \"lightest\".toLowerCase()) {\n    return array.sort((a, b) => a.weight - b.weight);\n  } else if (orderByFilter.toLowerCase() === \"Most Friendly\".toLowerCase()) {\n    return array.sort((a, b) => b.friends.length - a.friends.length);\n  } else if (orderByFilter.toLowerCase() === \"Less Friendly\".toLowerCase()) {\n    return array.sort((a, b) => a.friends.length - b.friends.length);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/utils.js"],"names":["itemsByPage","gnomesAPI","genderGuessingAPI","getFirstNames","gnomes","currentPage","updatedPage","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","removeDuplicates","array","filter","b","onlyNames","convertColorsToHex","color","colorName","toLowerCase","hexColor","filterGnomesBy","orderByFilter","Array","isArray","sort","age","weight","friends"],"mappings":"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","sourcesContent":["export const itemsByPage = 15;\nexport const gnomesAPI = \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\nexport const genderGuessingAPI = \"https://api.genderize.io/?\";\n\n// need to pay to use the genderize.io service for bulk process\n/*export function getCurrentPageGenderFormat (gnomes, currentPage){\n\n  let updatedPage = currentPage;\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n    itemsByPage * updatedPage,\n    itemsByPage + updatedPage * itemsByPage\n  )\n\n  pageGnomes.map(gnome => (\n    gnome => gnome.name\n  ))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n\n      function removeDuplicates(array) {\n        return array.filter((a, b) => array.indexOf(a) === b)\n      };\n      return removeDuplicates(arrCroped);\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n      }\n\n      return arrayFormated;\n\n  }\n\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  return format;\n}*/\n\nexport function getFirstNames (gnomes, currentPage){\n\n  let updatedPage = currentPage;\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n    itemsByPage * updatedPage,\n    itemsByPage + updatedPage * itemsByPage\n  )\n\n  pageGnomes.map(gnome => (\n    gnome => gnome.name\n  ))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n\n      function removeDuplicates(array) {\n        return array.filter((a, b) => array.indexOf(a) === b)\n      };\n      return removeDuplicates(arrCroped);\n  }\n\n  const onlyNames = getFirstName(pageGnomes);\n  return onlyNames;\n}\n\n\nexport function convertColorsToHex(color) {\n\n  const colorName = color.toLowerCase();\n  var hexColor = \"\";\n  switch (colorName) {\n    case \"red\":\n      hexColor = \"#f66969\";\n      break;\n    case \"pink\":\n      hexColor = \"#f6a2c0\";\n      break;\n    case \"green\":\n      hexColor = \"#80e8d4\";\n      break;\n    case \"black\":\n      hexColor = \"#4d5253\";\n      break;\n    case \"gray\":\n      hexColor = \"#8d9395\";\n      break;\n    default:\n      hexColor = \"#000\";\n      break;\n  }\n  return hexColor;\n}\n\nexport function filterGnomesBy(array, orderByFilter) {\n  if (!Array.isArray(array)) {\n    return null;\n  }\n\n  if (orderByFilter.toLowerCase() === \"Oldest\".toLowerCase()) {\n    return array.sort((a, b) => b.age - a.age);\n  } else if (orderByFilter.toLowerCase() === \"Youngest\".toLowerCase()) {\n    return array.sort((a, b) => a.age - b.age);\n  } else if (orderByFilter.toLowerCase() === \"Heaviest\".toLowerCase()) {\n    return array.sort((a, b) => b.weight - a.weight);\n  } else if (orderByFilter.toLowerCase() === \"lightest\".toLowerCase()) {\n    return array.sort((a, b) => a.weight - b.weight);\n  } else if (orderByFilter.toLowerCase() === \"Most Friendly\".toLowerCase()) {\n    return array.sort((a, b) => b.friends.length - a.friends.length);\n  } else if (orderByFilter.toLowerCase() === \"Less Friendly\".toLowerCase()) {\n    return array.sort((a, b) => a.friends.length - b.friends.length);\n  }\n\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}