{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Transition, CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../utils\";\n\nconst Home = props => {\n  console.log(\"props\");\n  console.log(props.store);\n  const {\n    searchTerm,\n    gnomes,\n    orderByFilter,\n    gender,\n    currentPage\n  } = props; //const [gender, setGender] = useState([]);\n\n  const itemsByPage = 15; // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter).filter(gnome => {\n    // filter by profession\n    // If this gnome has this profession from redux state\n    // return the profession of this gnome\n    const isJob = gnome.professions.find(profession => profession === props.filterBy); // And then if this gnome know this profession return true\n    // Otherwise return false and ignore pass this gnome to the new array\n\n    const hasProfession = gnome.professions.some(profession => profession === isJob); // if filterBy state is all returns all gnomes if not return depending\n    // of the profession we're looking for\n\n    return props.filterBy === \"All\" ? gnome : hasProfession;\n  }).filter(gnome => {\n    // Filter name\n    // This comentted expression is for search exactly\n    // if match from the beginning of the string\n    // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n    // Get the gnomes that contains this bit of string within\n    const search = gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n    return search;\n  });\n  return __jsx(HomeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Nicolas Bergues\"), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Assesment App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(TransitionGroup, {\n    className: \"cards\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage).map(gnome => __jsx(CSSTransition, {\n    key: gnome.id,\n    timeout: 500,\n    classNames: \"item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: gnome.id,\n    gnome: gnome && gnome,\n    to: `${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))) : __jsx(\"div\", {\n    className: \"notFound\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"no gnomes founded for current search\"))), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    gender: state.gender,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","useState","useEffect","Helmet","Transition","CSSTransition","TransitionGroup","connect","Filters","Card","actions","HomeRow","HomeWrapper","Pagination","filterGnomesBy","Home","props","console","log","store","searchTerm","gnomes","orderByFilter","gender","currentPage","itemsByPage","searchFilters","filter","gnome","isJob","professions","find","profession","filterBy","hasProfession","some","search","name","toLowerCase","indexOf","getCurrentPage","Math","floor","length","slice","map","id","split","join","mapStateToProps","state","orderBy"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Transition, CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../utils\";\n\n\nconst Home = (props) => {\n\n  console.log(\"props\")\n  console.log(props.store)\n  const { searchTerm, gnomes, orderByFilter, gender, currentPage } = props;\n\n  //const [gender, setGender] = useState([]);\n\n\n  const itemsByPage = 15;\n\n\n\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n\n      // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n      // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n\n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>Nicolas Bergues</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"Assesment App\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n      <HomeRow>\n      <TransitionGroup className=\"cards\">\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            )\n            .map(gnome => (\n              <CSSTransition key={gnome.id} timeout={500} classNames=\"item\">\n                <Card\n                  key={gnome.id}\n                  gnome={gnome && gnome}\n                  to={`${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n                />\n              </CSSTransition>\n            ))\n        ) : (\n          <div className={\"notFound\"}>no gnomes founded for current search</div>\n        )}\n        </TransitionGroup>\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n    </HomeWrapper>\n  );\n};\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    gender: state.gender,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}