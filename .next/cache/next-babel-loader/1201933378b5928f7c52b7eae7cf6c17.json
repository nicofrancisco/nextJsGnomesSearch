{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\"; // Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n// Declare our props with flow typed\n//type Props = State;\n\nvar Home = function Home(props) {\n  console.log(\"props\");\n  console.log(props); // destructuring our props for easy for write\n\n  var _useState = useState({\n    gnomes: [],\n    searchTerm: \"\",\n    filterBy: \"All\",\n    orderBy: \"\",\n    currentPage: 0\n  }),\n      searchTerm = _useState.searchTerm,\n      gnomes = _useState.gnomes,\n      orderByFilter = _useState.orderByFilter,\n      currentPage = _useState.currentPage; //const [data, setData] = useState([]);\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n\n\n  var itemsByPage = 9;\n  console.log(\"PROPS\");\n  console.log(gnomes); // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n\n  var searchFilters = filterGnomesBy(gnomes, orderByFilter).filter(function (gnome) {\n    // filter by profession\n    // If this gnome has this profession from redux state\n    // return the profession of this gnome\n    var isJob = gnome.professions.find(function (profession) {\n      return profession === props.filterBy;\n    }); // And then if this gnome know this profession return true\n    // Otherwise return false and ignore pass this gnome to the new array\n\n    var hasProfession = gnome.professions.some(function (profession) {\n      return profession === isJob;\n    }); // if filterBy state is all returns all gnomes if not return depending\n    // of the profession we're looking for\n\n    return props.filterBy === \"All\" ? gnome : hasProfession;\n  }).filter(function (gnome) {\n    // Filter name\n    // This comentted expression is for search exactly\n    // if match from the beginning of the string\n    // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n    // Get the gnomes that contains this bit of string within\n    var search = gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n    return search;\n  });\n  return __jsx(HomeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"BrastlewarkerS || Home\"), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n  .map(function (gnome) {\n    return __jsx(Card, {\n      key: gnome.id,\n      gnome: gnome && gnome,\n      to: \"/gnomes/\".concat(gnome.id, \"-\").concat(gnome.name.split(\" \").join(\"-\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    });\n  }) : __jsx(EmptyMsg, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"GNOME NOT FOUND\")), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }));\n}; // Inject Redux states to React Props\n// Thanks to react-redux connect method\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n} // This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\n\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","useState","useEffect","Helmet","connect","Filters","Card","actions","HomeRow","HomeWrapper","EmptyMsg","Pagination","filterGnomesBy","Home","props","console","log","gnomes","searchTerm","filterBy","orderBy","currentPage","orderByFilter","itemsByPage","searchFilters","filter","gnome","isJob","professions","find","profession","hasProfession","some","search","name","toLowerCase","indexOf","length","slice","map","id","split","join","getCurrentPage","Math","floor","mapStateToProps","state"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAO,KAAKC,OAAZ,MAAyB,+BAAzB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,sCAArB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,SAASC,cAAT,QAA+B,mBAA/B,C,CAEA;AACA;AAEA;AACA;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFsB,CAGtB;;AAHsB,kBAIqCb,QAAQ,CAAC;AAACgB,IAAAA,MAAM,EAAE,EAAT;AAAaC,IAAAA,UAAU,EAAE,EAAzB;AAA6BC,IAAAA,QAAQ,EAAE,KAAvC;AAA8CC,IAAAA,OAAO,EAAE,EAAvD;AAA2DC,IAAAA,WAAW,EAAE;AAAxE,GAAD,CAJ7C;AAAA,MAIdH,UAJc,aAIdA,UAJc;AAAA,MAIFD,MAJE,aAIFA,MAJE;AAAA,MAIMK,aAJN,aAIMA,aAJN;AAAA,MAIqBD,WAJrB,aAIqBA,WAJrB,EAMpB;;AAGF;;;;;;;;;AAOA,MAAME,WAAW,GAAG,CAApB;AAEAR,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAnBsB,CAsBtB;AACA;AACA;;AACA,MAAMO,aAAa,GAAGZ,cAAc,CAACK,MAAD,EAASK,aAAT,CAAd,CACnBG,MADmB,CACZ,UAAAC,KAAK,EAAI;AACf;AACA;AACA;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CACZ,UAAAC,UAAU;AAAA,aAAIA,UAAU,KAAKhB,KAAK,CAACK,QAAzB;AAAA,KADE,CAAd,CAJe,CAQf;AACA;;AACA,QAAMY,aAAa,GAAGL,KAAK,CAACE,WAAN,CAAkBI,IAAlB,CACpB,UAAAF,UAAU;AAAA,aAAIA,UAAU,KAAKH,KAAnB;AAAA,KADU,CAAtB,CAVe,CAaf;AACA;;AACA,WAAOb,KAAK,CAACK,QAAN,KAAmB,KAAnB,GAA2BO,KAA3B,GAAmCK,aAA1C;AACD,GAjBmB,EAkBnBN,MAlBmB,CAkBZ,UAAAC,KAAK,EAAI;AACf;AACA;AACA;AACA;AAEA;AACA,QAAMO,MAAM,GACVP,KAAK,CAACQ,IAAN,CAAWC,WAAX,GAAyBC,OAAzB,CAAiClB,UAAU,CAACiB,WAAX,EAAjC,KAA8D,CADhE;AAEA,WAAOF,MAAP;AACD,GA5BmB,CAAtB;AA8BA,SACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAM,IAAA,GAAG,EAAC,eAAV;AAA0B,IAAA,IAAI,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,OAAO,EAAC,8IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,EAYE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,aAAa,CAACa,MAAd,GAAuB,CAAvB,GACCb,aAAa,CACVc,KADH,CAEIf,WAAW,GAAGF,WAFlB,EAGIE,WAAW,GAAGF,WAAW,GAAGE,WAHhC,EAII;AAJJ,GAKGgB,GALH,CAKO,UAAAb,KAAK;AAAA,WACR,MAAC,IAAD;AACE,MAAA,GAAG,EAAEA,KAAK,CAACc,EADb;AAEE,MAAA,KAAK,EAAEd,KAAK,IAAIA,KAFlB;AAGE,MAAA,EAAE,oBAAaA,KAAK,CAACc,EAAnB,cAAyBd,KAAK,CAACQ,IAAN,CAAWO,KAAX,CAAiB,GAAjB,EAAsBC,IAAtB,CAA2B,GAA3B,CAAzB,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ;AAAA,GALZ,CADD,GAcC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAfJ,CAZF,EA8BE,MAAC,UAAD;AACE,IAAA,IAAI,EAAErB,WADR;AAEE,IAAA,iBAAiB,EAAEP,KAAK,CAAC6B,cAF3B;AAGE,IAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWrB,aAAa,CAACa,MAAd,GAAuBd,WAAlC,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,CADF;AAsCD,CA7FD,C,CA+FA;AACA;;;AACA,SAASuB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BhC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY+B,KAAZ;AACA,SAAO;AACL7B,IAAAA,UAAU,EAAE6B,KAAK,CAAC7B,UADb;AAELD,IAAAA,MAAM,EAAE8B,KAAK,CAAC9B,MAFT;AAGLE,IAAAA,QAAQ,EAAE4B,KAAK,CAAC5B,QAHX;AAILG,IAAAA,aAAa,EAAEyB,KAAK,CAAC3B,OAJhB;AAKLC,IAAAA,WAAW,EAAE0B,KAAK,CAAC1B;AALd,GAAP;AAOD,C,CACD;AACA;AACA;;;AACA,eAAejB,OAAO,CAAC0C,eAAD,EAAkBvC,OAAlB,CAAP,CAAkCM,IAAlC,CAAf","sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\";\n\n// Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n\n// Declare our props with flow typed\n//type Props = State;\n\nconst Home = (props) => {\n  console.log(\"props\")\n  console.log(props)\n  // destructuring our props for easy for write\n  const { searchTerm, gnomes, orderByFilter, currentPage } = useState({gnomes: [], searchTerm: \"\", filterBy: \"All\", orderBy: \"\", currentPage: 0});\n\n    //const [data, setData] = useState([]);\n\n\n  /*useEffect(() => {\n    console.log(\"hello\");\n    //fetch(\"http://localhost:3001/links/\")\n    this.props.fetchGnomes()\n      .then(response => response.json())\n      //.then(gnomes => setData(gnomes));\n  });*/\n  const itemsByPage = 9;\n\n  console.log(\"PROPS\");\n  console.log(gnomes);\n\n\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n\n      // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n      // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n  \n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>BrastlewarkerS || Home</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <HomeRow>\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n            .map(gnome => (\n              <Card\n                key={gnome.id}\n                gnome={gnome && gnome}\n                to={`/gnomes/${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n              />\n            ))\n        ) : (\n          <EmptyMsg>GNOME NOT FOUND</EmptyMsg>\n        )}\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n    </HomeWrapper>\n  );\n};\n\n// Inject Redux states to React Props\n// Thanks to react-redux connect method\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n// This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}