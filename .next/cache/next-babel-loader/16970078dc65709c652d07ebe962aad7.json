{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Main.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Link from 'next/link';\nimport * as actions from \"../redux/actions/actions\";\nimport Loading from \"../components/Loading/Loading\";\nimport Home from './Home/Home.js';\nimport Routes from \"./../../routes/routes\";\nimport Header from \"./Header/Header.js\";\nimport Footer from \"./../components/Footer/Footer.js\";\n\nclass Main extends Component {\n  componentDidMount() {\n    console.log(\"mount\");\n    this.props.fetchGnomes();\n  } // If there is not gnomes in the gnomes state (got from Redux state)\n  // it will render Loading component first while we can receive all the inhabitants\n\n\n  render() {\n    //\"/gnomes/297-Malbert-Wrongtink\">\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, this.props.gnomes.length === 0 ? __jsx(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }) : __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, __jsx(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), __jsx(Home, {\n      data: this.props,\n      store: this.props.store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), __jsx(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }))) //<Details gnomes={this.props.gnomes} gnomeURL=\"0-Tobus-Quickwhistle\" />\n\n    /*<Router>\n     </Router>*/\n\n    /*<DynamicComponent gnomes={this.props.gnomes} gnomeURL=\"0-Tobus-Quickwhistle\"/>\n    <Routes gnomes={this.props.gnomes}>\n     </Routes>*/\n    ;\n  }\n\n} // mapStateToProps we pass this function to the connect method to\n// inject our Redux states as props in Main container\n//const DynamicComponent = dynamic(() => import('./../containers/Details/Details.js'))\n\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Main);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Main.js"],"names":["React","Component","connect","Link","actions","Loading","Home","Routes","Header","Footer","Main","componentDidMount","console","log","props","fetchGnomes","render","gnomes","length","store","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;;AAGA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AAC3BU,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,SAAKC,KAAL,CAAWC,WAAX;AAED,GAN0B,CAQ3B;AACA;;;AACAC,EAAAA,MAAM,GAAG;AAAC;AACR,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,KAA6B,CAA7B,GACC,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGA,MAAC,IAAD;AAAM,MAAA,IAAI,EAAE,KAAKJ,KAAjB;AAAwB,MAAA,KAAK,EAAE,KAAKA,KAAL,CAAWK,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,EAKA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,CAJF,CADF,CAiBE;;AACA;;;AAGA;;;AArBF;AA2BD;;AAtC0B,C,CAyC7B;AACA;AACA;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLJ,IAAAA,MAAM,EAAEI,KAAK,CAACJ;AADT,GAAP;AAGD;;AAED,eAAef,OAAO,CAACkB,eAAD,EAAkBhB,OAAlB,CAAP,CAAkCM,IAAlC,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Link from 'next/link';\nimport * as actions from \"../redux/actions/actions\";\nimport Loading from \"../components/Loading/Loading\";\nimport Home from './Home/Home.js'\nimport Routes from \"./../../routes/routes\";\nimport Header from \"./Header/Header.js\";\nimport Footer from \"./../components/Footer/Footer.js\";\n\n\nclass Main extends Component {\n  componentDidMount() {\n    console.log(\"mount\")\n\n    this.props.fetchGnomes();\n\n  }\n\n  // If there is not gnomes in the gnomes state (got from Redux state)\n  // it will render Loading component first while we can receive all the inhabitants\n  render() {//\"/gnomes/297-Malbert-Wrongtink\">\n    return (\n      <div>\n      {this.props.gnomes.length === 0 ? (\n        <Loading />\n      ) : (\n        <div>\n\n        <Header />\n        <Home data={this.props} store={this.props.store}/>\n\n        <Footer />\n\n\n        </div>\n\n      )}\n      </div>\n      //<Details gnomes={this.props.gnomes} gnomeURL=\"0-Tobus-Quickwhistle\" />\n      /*<Router>\n\n      </Router>*/\n      /*<DynamicComponent gnomes={this.props.gnomes} gnomeURL=\"0-Tobus-Quickwhistle\"/>\n      <Routes gnomes={this.props.gnomes}>\n\n      </Routes>*/\n\n    );\n  }\n}\n\n// mapStateToProps we pass this function to the connect method to\n// inject our Redux states as props in Main container\n//const DynamicComponent = dynamic(() => import('./../containers/Details/Details.js'))\n\nfunction mapStateToProps(state) {\n  return {\n    gnomes: state.gnomes,\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Main);\n"]},"metadata":{},"sourceType":"module"}