{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\"; //import { itemsByPage, getCurrentPageGenderFormat } from \"./../../utils\";\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({\n  page,\n  updateGlobalState,\n  maxPages\n}) => //const callGenderLocal = callGender;\n//const propsGenderLocal = propsGender;\n__jsx(PaginationWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, __jsx(PaginationBtn, {\n  disableStyle: page <= 0,\n  page: page,\n  onClick: Pagination.onClick(page, updateGlobalState, maxPages),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"Previous\"), __jsx(\"span\", {\n  className: \"current-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"Page: \", page + 1, \" / \", maxPages + 1), __jsx(PaginationBtn, {\n  disableStyle: page >= maxPages,\n  page: page,\n  onClick: Pagination.onClick(page, updateGlobalState, maxPages),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, \"Next\"));\n\nPagination.onClick = (page, updateGlobalState, maxPages) => (event = event.currentTarget) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n  const btnName = event.currentTarget.textContent.toLowerCase();\n  /*let format;\n   const setDirection = (direction) =>{\n         let updatedPageNext = page + 1;\n        let updatedPagePrevious = page  - 1;\n        const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n         const gnomeNames = gnomes.map(gnome => gnome.name)\n        const pageGnomes = gnomeNames.slice(\n        itemsByPage * paginationDirection,\n        itemsByPage + paginationDirection * itemsByPage\n        )\n         pageGnomes.map(gnome => (\n          gnome => gnome.name\n        ))\n           const getFirstName = arr =>{\n            var arrCroped = [];\n              for(var a=0; a<arr.length; a++){\n                 var corte = arr[a].indexOf(\" \");\n                arrCroped[a] = arr[a].substr(0, corte);\n              }\n              function removeDuplicates(array) {\n                return array.filter((a, b) => array.indexOf(a) === b)\n              };\n              return removeDuplicates(arrCroped);\n          }\n           const justRenderedPageNames = getFirstName(pageGnomes);\n           const parseToService = arrToFormat =>{\n            var arrayFormated = [];\n               for(var b=0; b<arrToFormat.length; b++){\n                arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n              }\n               return arrayFormated;\n           }\n           format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n   }*/\n\n  console.log(maxPages);\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    const nextPage = page + 1;\n\n    if (page !== maxPages) {\n      updateGlobalState(nextPage); //setDirection(\"next\")\n      //callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    const previousPage = page - 1;\n\n    if (page > 0) {\n      updateGlobalState(previousPage); //setDirection(\"previous\")\n      //callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","PaginationWrapper","PaginationBtn","nextButtonValue","previousButtonValue","Pagination","page","updateGlobalState","maxPages","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","console","log","nextPage","previousPage","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,oBAAjD,C,CACA;;AAGA,MAAMC,eAAe,GAAG,MAAxB;AACA,MAAMC,mBAAmB,GAAG,UAA5B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,iBAAP;AAA0BC,EAAAA;AAA1B,CAAD,KACjB;AACA;AACA,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,aAAD;AACE,EAAA,YAAY,EAAEF,IAAI,IAAI,CADxB;AAEE,EAAA,IAAI,EAAEA,IAFR;AAGE,EAAA,OAAO,EAAED,UAAU,CAACI,OAAX,CAAmBH,IAAnB,EAAyBC,iBAAzB,EAA4CC,QAA5C,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAQE;AAAM,EAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAsCF,IAAI,GAAG,CAA7C,SAAmDE,QAAQ,GAAG,CAA9D,CARF,EASE,MAAC,aAAD;AACE,EAAA,YAAY,EAAEF,IAAI,IAAIE,QADxB;AAEE,EAAA,IAAI,EAAEF,IAFR;AAGE,EAAA,OAAO,EAAED,UAAU,CAACI,OAAX,CAAmBH,IAAnB,EAAyBC,iBAAzB,EAA4CC,QAA5C,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CAHF;;AAsBAH,UAAU,CAACI,OAAX,GAAqB,CAACH,IAAD,EAAOC,iBAAP,EAA0BC,QAA1B,KAAuC,CAC1DE,KAAK,GAAEA,KAAK,CAACC,aAD6C,KAEvD;AACHD,EAAAA,KAAK,CAACE,cAAN;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB,CAApB;AAEA,QAAMC,OAAO,GAAGL,KAAK,CAACC,aAAN,CAAoBK,WAApB,CAAgCC,WAAhC,EAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;;AAEA,MAAIO,OAAO,KAAKZ,eAAe,CAACc,WAAhB,EAAhB,EAA+C;AAC7C,UAAMG,QAAQ,GAAGd,IAAI,GAAG,CAAxB;;AACA,QAAIA,IAAI,KAAKE,QAAb,EAAuB;AACrBD,MAAAA,iBAAiB,CAACa,QAAD,CAAjB,CADqB,CAErB;AACA;AACD;AACF,GAPD,MAOO,IAAIL,OAAO,KAAKX,mBAAmB,CAACa,WAApB,EAAhB,EAAmD;AACxD,UAAMI,YAAY,GAAGf,IAAI,GAAG,CAA5B;;AACA,QAAIA,IAAI,GAAG,CAAX,EAAc;AACZC,MAAAA,iBAAiB,CAACc,YAAD,CAAjB,CADY,CAEZ;AACA;AACD;AACF;AACF,CAxED;;AA0EAhB,UAAU,CAACiB,YAAX,GAA0B;AACxBhB,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA,eAAeD,UAAf","sourcesContent":["import React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\n//import { itemsByPage, getCurrentPageGenderFormat } from \"./../../utils\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({page, updateGlobalState, maxPages}) => (\n  //const callGenderLocal = callGender;\n  //const propsGenderLocal = propsGender;\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(page, updateGlobalState, maxPages)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1} / {maxPages + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(page, updateGlobalState, maxPages)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (page, updateGlobalState, maxPages) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  /*let format;\n\n  const setDirection = (direction) =>{\n\n        let updatedPageNext = page + 1;\n        let updatedPagePrevious = page  - 1;\n        const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n\n        const gnomeNames = gnomes.map(gnome => gnome.name)\n        const pageGnomes = gnomeNames.slice(\n        itemsByPage * paginationDirection,\n        itemsByPage + paginationDirection * itemsByPage\n        )\n\n        pageGnomes.map(gnome => (\n          gnome => gnome.name\n        ))\n\n          const getFirstName = arr =>{\n            var arrCroped = [];\n              for(var a=0; a<arr.length; a++){\n\n                var corte = arr[a].indexOf(\" \");\n                arrCroped[a] = arr[a].substr(0, corte);\n              }\n              function removeDuplicates(array) {\n                return array.filter((a, b) => array.indexOf(a) === b)\n              };\n              return removeDuplicates(arrCroped);\n          }\n\n          const justRenderedPageNames = getFirstName(pageGnomes);\n\n          const parseToService = arrToFormat =>{\n            var arrayFormated = [];\n\n              for(var b=0; b<arrToFormat.length; b++){\n                arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n              }\n\n              return arrayFormated;\n\n          }\n\n          format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  }*/\n  console.log(maxPages)\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n      //setDirection(\"next\")\n      //callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n      //setDirection(\"previous\")\n      //callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}