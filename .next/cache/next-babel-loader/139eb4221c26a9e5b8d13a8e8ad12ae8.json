{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/actions/actions\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nvar nextButtonValue = \"Next\";\nvar previousButtonValue = \"Previous\";\n\nvar Pagination = function Pagination(_ref) {\n  var props = _ref.props,\n      gender = _ref.gender,\n      page = _ref.page,\n      updateGlobalState = _ref.updateGlobalState,\n      maxPages = _ref.maxPages;\n  console.log(gender);\n  useEffect(function () {\n    console.log(\"calling again\");\n    props.fetchGender(format).then(function (response) {\n      _JSON$stringify(response);\n\n      console.log(response);\n    });\n    console.log(\"gender x\");\n    console.log(gender);\n  }, []);\n  console.log(\"AFTER\");\n  console.log(gender);\n  var gnomeNames = gnomes.map(function (gnome) {\n    return gnome.name;\n  });\n  var pageGnomes = gnomeNames.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage); // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(function (gnome) {\n    return function (gnome) {\n      return gnome.name;\n    };\n  });\n\n  var getFirstName = function getFirstName(arr) {\n    var arrCroped = [];\n\n    for (var a = 0; a < arr.length; a++) {\n      var corte = arr[a].indexOf(\" \");\n      arrCroped[a] = arr[a].substr(0, corte);\n    }\n\n    return arrCroped;\n  };\n\n  var justRenderedPageNames = getFirstName(pageGnomes);\n\n  var parseToService = function parseToService(arrToFormat) {\n    var arrayFormated = [];\n\n    for (var b = 0; b < arrToFormat.length; b++) {\n      arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n    }\n\n    return arrayFormated;\n  };\n\n  var format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n  return __jsx(PaginationWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(PaginationBtn, {\n    disableStyle: page <= 0,\n    page: page,\n    onClick: Pagination.onClick(updateGlobalState, page),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Previous\"), __jsx(\"span\", {\n    className: \"current-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Page: \", page + 1), __jsx(PaginationBtn, {\n    disableStyle: page >= maxPages,\n    page: page,\n    onClick: Pagination.onClick(updateGlobalState, page, maxPages),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Next\"));\n};\n\nPagination.onClick = function (updateGlobalState, page, maxPages) {\n  return function () {\n    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : event.currentTarget;\n    event.preventDefault(); // when page change take scroll to top\n\n    window.scroll(null, 0);\n    console.log(gender); //callGender(propsGender)\n    // Get the button name\n\n    var btnName = event.currentTarget.textContent.toLowerCase(); // if btnName is equal tot the nextButton value add a page until find the last page\n\n    if (btnName === nextButtonValue.toLowerCase()) {\n      // just add a new page if it is minor than maxPage\n      var nextPage = page + 1;\n\n      if (page !== maxPages) {\n        updateGlobalState(nextPage);\n      }\n    } else if (btnName === previousButtonValue.toLowerCase()) {\n      // Remove a page until it find the first page\n      var previousPage = page - 1;\n\n      if (page > 0) {\n        updateGlobalState(previousPage);\n      }\n    }\n  };\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nfunction mapStateToProps(state) {\n  console.log(\"pagination gender\");\n  console.log(state);\n  return {\n    gender: state.gender\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Pagination); //export default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","useState","useEffect","connect","actions","PaginationWrapper","PaginationBtn","nextButtonValue","previousButtonValue","Pagination","props","gender","page","updateGlobalState","maxPages","console","log","fetchGender","format","then","response","gnomeNames","gnomes","map","gnome","name","pageGnomes","slice","itemsByPage","currentPage","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","toString","replace","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","nextPage","previousPage","defaultProps","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/actions/actions\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({  props, gender, page, updateGlobalState, maxPages}) => {\n\n  console.log(gender)\n\n  useEffect(() => {\n    console.log(\"calling again\")\n    props.fetchGender(format).then(response =>{ JSON.stringify(response); console.log(response)})\n\n    console.log(\"gender x\")\n    console.log(gender)\n\n  }, [])\n\n  console.log(\"AFTER\")\n  console.log(gender)\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n  itemsByPage * currentPage,\n  itemsByPage + currentPage * itemsByPage\n  ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(gnome => (\n    gnome => gnome.name\n  ))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n      return arrCroped;\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n      }\n\n      return arrayFormated;\n\n  }\n\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n\n  return(\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page)}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(updateGlobalState, page, maxPages)}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n)};\n\nPagination.onClick = (updateGlobalState, page, maxPages) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  // when page change take scroll to top\n  window.scroll(null, 0);\n  console.log(gender)\n  //callGender(propsGender)\n  // Get the button name\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  // if btnName is equal tot the nextButton value add a page until find the last page\n  if (btnName === nextButtonValue.toLowerCase()) {\n    // just add a new page if it is minor than maxPage\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    // Remove a page until it find the first page\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nfunction mapStateToProps(state) {\n  console.log(\"pagination gender\")\n  console.log(state)\n  return {\n    gender: state.gender,\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Pagination);\n\n//export default Pagination;\n"]},"metadata":{},"sourceType":"module"}