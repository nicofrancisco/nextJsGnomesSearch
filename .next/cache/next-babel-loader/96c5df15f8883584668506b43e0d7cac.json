{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\"; // Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n// Declare our props with flow typed\n//type Props = State;\n\nclass Home extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"mount HOME\"); // Get all the gnomes from the Api\n    // this is an action creator we got from the react-redux connect method\n\n    this.props.fetchGnomes();\n  }\n\n  render() {\n    // destructuring our props for easy for write\n    //const { searchTerm, gnomes, orderByFilter, currentPage } = props;\n    const gnomes = props.gnomes;\n    const searchTerm = props.searchTerm;\n    const orderByFilter = props.orderByFilter;\n    const currentPage = props.currentPage;\n    const itemsByPage = 9;\n    console.log(\"PROPS\");\n    console.log(this.props); // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n    // Returns and array with all the filtered gnomes and finally generate\n    // our card based this filtered array\n\n    const searchFilters = filterGnomesBy(gnomes, orderByFilter).filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(profession => profession === props.filterBy); // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n\n      const hasProfession = gnome.professions.some(profession => profession === isJob); // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    }).filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n      // Get the gnomes that contains this bit of string within\n      const search = gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n    /*\n          Declaring meta tags and title for <head> thanks to react-helmet\n         the rest of UI Components is for controlling our filters\n         if there is not coincidences return EmptyMSG which inform this gnome\n         was not matched\n        */\n\n    return __jsx(HomeWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, __jsx(Helmet, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"BrastlewarkerS || Home\"), __jsx(\"link\", {\n      rel: \"shortcut icon\",\n      href: \"favicon.ico\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: \"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), __jsx(HomeRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(Filters, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), __jsx(HomeRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n    .map(gnome => __jsx(Card, {\n      key: gnome.id,\n      gnome: gnome && gnome,\n      to: `/gnomes/${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })) : __jsx(EmptyMsg, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"GNOME NOT FOUND\")), __jsx(Pagination, {\n      page: currentPage,\n      updateGlobalState: props.getCurrentPage,\n      maxPages: Math.floor(searchFilters.length / itemsByPage),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n} // Inject Redux states to React Props\n// Thanks to react-redux connect method\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n} // This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\n\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","Component","Helmet","connect","Filters","Card","actions","HomeRow","HomeWrapper","EmptyMsg","Pagination","filterGnomesBy","Home","constructor","props","context","state","componentDidMount","console","log","fetchGnomes","render","gnomes","searchTerm","orderByFilter","currentPage","itemsByPage","searchFilters","filter","gnome","isJob","professions","find","profession","filterBy","hasProfession","some","search","name","toLowerCase","indexOf","length","slice","map","id","split","join","getCurrentPage","Math","floor","mapStateToProps","orderBy"],"mappings":"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","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport EmptyMsg from \"./../../components/EmptyMsg/EmptyMsg\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../functions\";\n// Import State Flow type for our redux state to props declaration\n//import type { State } from \"./../../../flow-typed/types\";\n\n// Declare our props with flow typed\n//type Props = State;\n\nclass Home extends Component {\n\n  constructor(props , context){\n    super(props ,context);\n    this.state = {\n\n      }\n\n    }\n\n  componentDidMount() {\n    console.log(\"mount HOME\")\n    // Get all the gnomes from the Api\n    // this is an action creator we got from the react-redux connect method\n    this.props.fetchGnomes();\n\n\n  }\n\n\n\n\n  render() {\n    // destructuring our props for easy for write\n        //const { searchTerm, gnomes, orderByFilter, currentPage } = props;\n\n        const gnomes = props.gnomes;\n        const searchTerm = props.searchTerm;\n        const orderByFilter = props.orderByFilter;\n        const currentPage  = props.currentPage;\n        const itemsByPage = 9;\n\n        console.log(\"PROPS\");\n        console.log(this.props);\n        // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n        // Returns and array with all the filtered gnomes and finally generate\n        // our card based this filtered array\n        const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n          .filter(gnome => {\n            // filter by profession\n            // If this gnome has this profession from redux state\n            // return the profession of this gnome\n            const isJob = gnome.professions.find(\n              profession => profession === props.filterBy\n            );\n\n            // And then if this gnome know this profession return true\n            // Otherwise return false and ignore pass this gnome to the new array\n            const hasProfession = gnome.professions.some(\n              profession => profession === isJob\n            );\n            // if filterBy state is all returns all gnomes if not return depending\n            // of the profession we're looking for\n            return props.filterBy === \"All\" ? gnome : hasProfession;\n          })\n          .filter(gnome => {\n            // Filter name\n            // This comentted expression is for search exactly\n            // if match from the beginning of the string\n            // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n            // Get the gnomes that contains this bit of string within\n            const search =\n              gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n            return search;\n          });\n        /*\n              Declaring meta tags and title for <head> thanks to react-helmet\n             the rest of UI Components is for controlling our filters\n             if there is not coincidences return EmptyMSG which inform this gnome\n             was not matched\n            */\n\n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>BrastlewarkerS || Home</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"little application where it's posible to consult information about the inhabitants of brastlewarks, age, weight, name, professions and more.\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <HomeRow>\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n            .map(gnome => (\n              <Card\n                key={gnome.id}\n                gnome={gnome && gnome}\n                to={`/gnomes/${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n              />\n            ))\n        ) : (\n          <EmptyMsg>GNOME NOT FOUND</EmptyMsg>\n        )}\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n      />\n    </HomeWrapper>\n  );\n};\n}\n\n\n// Inject Redux states to React Props\n// Thanks to react-redux connect method\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage\n  };\n}\n// This approach to get actions creators is easier\n// Since we get all the exported methods when we import the file\n// and just with passing in connect we have access to all of them\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}