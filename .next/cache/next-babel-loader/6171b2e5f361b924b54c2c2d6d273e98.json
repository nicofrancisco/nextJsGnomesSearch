{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport App from 'next/app';\nimport { Provider } from './Context';\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Provider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MyApp;\n/*import App from 'next/app';\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n MyApp.getInitialProps = async (appContext) => {\n   // calls page's `getInitialProps` and fills `appProps.pageProps`\n   const appProps = await App.getInitialProps(appContext);\n\n   return { ...appProps }\n }\n\nexport default MyApp*/","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/app.js"],"names":["React","App","Provider","MyApp","render","Component","pageProps","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAAQC,QAAR,QAAuB,WAAvB;;AAEA,MAAMC,KAAN,SAAoBF,GAApB,CAAwB;AACtBG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2B,KAAKC,KAAtC;AACA,WAAO,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAU,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAV,CAAP;AACD;;AAJqB;;AAOxB,eAAeH,KAAf;AACA","sourcesContent":["import React from 'react'\nimport App from 'next/app'\nimport {Provider} from './Context';\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props\n    return <Provider><Component {...pageProps} /></Provider>\n  }\n}\n\nexport default MyApp\n/*import App from 'next/app';\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n MyApp.getInitialProps = async (appContext) => {\n   // calls page's `getInitialProps` and fills `appProps.pageProps`\n   const appProps = await App.getInitialProps(appContext);\n\n   return { ...appProps }\n }\n\nexport default MyApp*/\n"]},"metadata":{},"sourceType":"module"}