{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nimport { itemsByPage, getCurrentPageGenderFormat } from \"./../../utils\";\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({\n  gnomes,\n  page,\n  updateGlobalState,\n  maxPages,\n  callGender\n}) => //const callGenderLocal = callGender;\n//const propsGenderLocal = propsGender;\n__jsx(PaginationWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, __jsx(PaginationBtn, {\n  disableStyle: page <= 0,\n  page: page,\n  onClick: Pagination.onClick(gnomes, page, updateGlobalState, maxPages, callGender),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"Previous\"), __jsx(\"span\", {\n  className: \"current-page\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"Page: \", page + 1), __jsx(PaginationBtn, {\n  disableStyle: page >= maxPages,\n  page: page,\n  onClick: Pagination.onClick(gnomes, page, updateGlobalState, maxPages, callGender),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, \"Next\"));\n\nPagination.onClick = (gnomes, page, updateGlobalState, maxPages, callGender) => (event = event.currentTarget) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n  const btnName = event.currentTarget.textContent.toLowerCase();\n  let format;\n\n  const setDirection = direction => {\n    let updatedPageNext = page + 1;\n    let updatedPagePrevious = page - 1;\n    const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n    const gnomeNames = gnomes.map(gnome => gnome.name);\n    const pageGnomes = gnomeNames.slice(itemsByPage * paginationDirection, itemsByPage + paginationDirection * itemsByPage);\n    pageGnomes.map(gnome => gnome => gnome.name);\n\n    const getFirstName = arr => {\n      var arrCroped = [];\n\n      for (var a = 0; a < arr.length; a++) {\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n\n      function removeDuplicates(array) {\n        return array.filter((a, b) => array.indexOf(a) === b);\n      }\n\n      ;\n      return removeDuplicates(arrCroped);\n    };\n\n    const justRenderedPageNames = getFirstName(pageGnomes);\n\n    const parseToService = arrToFormat => {\n      var arrayFormated = [];\n\n      for (var b = 0; b < arrToFormat.length; b++) {\n        arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n      }\n\n      return arrayFormated;\n    };\n\n    format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n  };\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    const nextPage = page + 1;\n\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n      setDirection(\"next\");\n      callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    const previousPage = page - 1;\n\n    if (page > 0) {\n      updateGlobalState(previousPage);\n      setDirection(\"previous\");\n      callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/components/Pagination/Pagination.jsx"],"names":["React","PaginationWrapper","PaginationBtn","itemsByPage","getCurrentPageGenderFormat","nextButtonValue","previousButtonValue","Pagination","gnomes","page","updateGlobalState","maxPages","callGender","onClick","event","currentTarget","preventDefault","window","scroll","btnName","textContent","toLowerCase","format","setDirection","direction","updatedPageNext","updatedPagePrevious","paginationDirection","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","removeDuplicates","array","filter","b","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","toString","replace","nextPage","previousPage","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { PaginationWrapper, PaginationBtn } from \"./PaginationStyled\";\nimport { itemsByPage, getCurrentPageGenderFormat } from \"./../../utils\";\n\n\nconst nextButtonValue = \"Next\";\nconst previousButtonValue = \"Previous\";\n\nconst Pagination = ({ gnomes, page, updateGlobalState, maxPages, callGender }) => (\n  //const callGenderLocal = callGender;\n  //const propsGenderLocal = propsGender;\n  <PaginationWrapper>\n    <PaginationBtn\n      disableStyle={page <= 0}\n      page={page}\n      onClick={Pagination.onClick(gnomes, page, updateGlobalState, maxPages, callGender )}\n    >\n      Previous\n    </PaginationBtn>\n    <span className=\"current-page\">Page: {page + 1}</span>\n    <PaginationBtn\n      disableStyle={page >= maxPages}\n      page={page}\n      onClick={Pagination.onClick(gnomes, page, updateGlobalState, maxPages, callGender )}\n    >\n      Next\n    </PaginationBtn>\n  </PaginationWrapper>\n);\n\nPagination.onClick = (gnomes, page, updateGlobalState, maxPages, callGender ) => (\n  event= event.currentTarget\n) => {\n  event.preventDefault();\n  window.scroll(null, 0);\n\n  const btnName = event.currentTarget.textContent.toLowerCase();\n\n  let format;\n\n  const setDirection = (direction) =>{\n\n        let updatedPageNext = page + 1;\n        let updatedPagePrevious = page  - 1;\n        const paginationDirection = direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n\n        const gnomeNames = gnomes.map(gnome => gnome.name)\n        const pageGnomes = gnomeNames.slice(\n        itemsByPage * paginationDirection,\n        itemsByPage + paginationDirection * itemsByPage\n        )\n\n        pageGnomes.map(gnome => (\n          gnome => gnome.name\n        ))\n\n          const getFirstName = arr =>{\n            var arrCroped = [];\n              for(var a=0; a<arr.length; a++){\n\n                var corte = arr[a].indexOf(\" \");\n                arrCroped[a] = arr[a].substr(0, corte);\n              }\n              function removeDuplicates(array) {\n                return array.filter((a, b) => array.indexOf(a) === b)\n              };\n              return removeDuplicates(arrCroped);\n          }\n\n          const justRenderedPageNames = getFirstName(pageGnomes);\n\n          const parseToService = arrToFormat =>{\n            var arrayFormated = [];\n\n              for(var b=0; b<arrToFormat.length; b++){\n                arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n              }\n\n              return arrayFormated;\n\n          }\n\n          format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n  }\n\n  if (btnName === nextButtonValue.toLowerCase()) {\n    const nextPage = page + 1;\n    if (page !== maxPages) {\n      updateGlobalState(nextPage);\n      setDirection(\"next\")\n      callGender(format);\n    }\n  } else if (btnName === previousButtonValue.toLowerCase()) {\n    const previousPage = page - 1;\n    if (page > 0) {\n      updateGlobalState(previousPage);\n      setDirection(\"previous\")\n      callGender(format);\n    }\n  }\n};\n\nPagination.defaultProps = {\n  page: false\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}