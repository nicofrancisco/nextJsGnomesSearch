{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Transition, CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../utils\";\n\nvar Home = function Home(props) {\n  console.log(\"props\");\n  console.log(props.store);\n  var searchTerm = props.searchTerm,\n      gnomes = props.gnomes,\n      orderByFilter = props.orderByFilter,\n      gender = props.gender,\n      currentPage = props.currentPage,\n      direction = props.direction; //const [gender, setGender] = useState([]);\n\n  useEffect(function () {\n    console.log(\"calling again\");\n    props.fetchGender(format).then(function (response) {\n      _JSON$stringify(response);\n\n      console.log(response);\n    });\n    console.log(\"gender x\");\n    console.log(gender);\n  }, []);\n  console.log(\"AFTER\");\n  console.log(gender);\n  var referenceFetchGender = props.fetchGender;\n  var itemsByPage = 1; //if(currentPage != 1){\n  //currentPage = props.getCurrentPage;\n\n  console.log(\"props.getCurrentPage\");\n  console.log(props.getCurrentPage(currentPage));\n  console.log(\"DIRECTION\");\n  console.log(props.direction); //}\n\n  var updatedPageNext = props.getCurrentPage(currentPage).payload + 1;\n  var updatedPagePrevious = props.getCurrentPage(currentPage).payload - 1;\n  var paginationDirection = 0;\n\n  if (props.direction != \"\") {\n    paginationDirection = props.direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n  } else {\n    paginationDirection = props.getCurrentPage(currentPage).payload;\n  }\n\n  var gnomeNames = gnomes.map(function (gnome) {\n    return gnome.name;\n  });\n  var pageGnomes = gnomeNames.slice(itemsByPage * paginationDirection, itemsByPage + paginationDirection * itemsByPage); // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(function (gnome) {\n    return function (gnome) {\n      return gnome.name;\n    };\n  });\n\n  var getFirstName = function getFirstName(arr) {\n    var arrCroped = [];\n\n    for (var a = 0; a < arr.length; a++) {\n      var corte = arr[a].indexOf(\" \");\n      arrCroped[a] = arr[a].substr(0, corte);\n    }\n\n    return arrCroped;\n  };\n\n  var justRenderedPageNames = getFirstName(pageGnomes);\n\n  var parseToService = function parseToService(arrToFormat) {\n    var arrayFormated = [];\n\n    for (var b = 0; b < arrToFormat.length; b++) {\n      arrayFormated[b] = \"name[]=\" + arrToFormat[b];\n    }\n\n    return arrayFormated;\n  };\n\n  var format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\"); // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n\n  var searchFilters = filterGnomesBy(gnomes, orderByFilter).filter(function (gnome) {\n    // filter by profession\n    // If this gnome has this profession from redux state\n    // return the profession of this gnome\n    var isJob = gnome.professions.find(function (profession) {\n      return profession === props.filterBy;\n    }); // And then if this gnome know this profession return true\n    // Otherwise return false and ignore pass this gnome to the new array\n\n    var hasProfession = gnome.professions.some(function (profession) {\n      return profession === isJob;\n    }); // if filterBy state is all returns all gnomes if not return depending\n    // of the profession we're looking for\n\n    return props.filterBy === \"All\" ? gnome : hasProfession;\n  }).filter(function (gnome) {\n    // Filter name\n    // This comentted expression is for search exactly\n    // if match from the beginning of the string\n    // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n    // Get the gnomes that contains this bit of string within\n    var search = gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n    return search;\n  });\n  return __jsx(HomeWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Nicolas Bergues\"), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Assesment App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, __jsx(Filters, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    propsGender: format,\n    callGender: referenceFetchGender,\n    updateDirection: props.getDirection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), __jsx(HomeRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(TransitionGroup, {\n    className: \"cards\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, searchFilters.length > 0 ? searchFilters.slice(itemsByPage * currentPage, itemsByPage + currentPage * itemsByPage).map(function (gnome) {\n    return __jsx(CSSTransition, {\n      key: gnome.id,\n      timeout: 500,\n      classNames: \"item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(Card, {\n      key: gnome.id,\n      gnome: gnome && gnome,\n      to: \"\".concat(gnome.id, \"-\").concat(gnome.name.split(\" \").join(\"-\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }) : __jsx(\"div\", {\n    className: \"notFound\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"no gnomes founded for current search\"))), __jsx(Pagination, {\n    page: currentPage,\n    updateGlobalState: props.getCurrentPage,\n    maxPages: Math.floor(searchFilters.length / itemsByPage),\n    propsGender: format,\n    callGender: referenceFetchGender,\n    updateDirection: props.getDirection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps(state) {\n  console.log(\"state\");\n  console.log(state);\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    gender: state.gender,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage,\n    direction: state.direction\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Home);","map":{"version":3,"sources":["/Users/nicolasfbergues/Desktop/Nico/Trabajo/Aerolab/NextDemo/learnnextjs-demo/pages/containers/Home/Home.js"],"names":["React","useState","useEffect","Helmet","Transition","CSSTransition","TransitionGroup","connect","Filters","Card","actions","HomeRow","HomeWrapper","Pagination","filterGnomesBy","Home","props","console","log","store","searchTerm","gnomes","orderByFilter","gender","currentPage","direction","fetchGender","format","then","response","referenceFetchGender","itemsByPage","getCurrentPage","updatedPageNext","payload","updatedPagePrevious","paginationDirection","gnomeNames","map","gnome","name","pageGnomes","slice","getFirstName","arr","arrCroped","a","length","corte","indexOf","substr","justRenderedPageNames","parseToService","arrToFormat","arrayFormated","b","toString","replace","searchFilters","filter","isJob","professions","find","profession","filterBy","hasProfession","some","search","toLowerCase","Math","floor","getDirection","id","split","join","mapStateToProps","state","orderBy"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Transition, CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport Filters from \"./../Filters/Filters\";\nimport Card from \"./../../components/Card/Card\";\nimport * as actions from \"./../../redux/actions/actions\";\nimport { HomeRow, HomeWrapper } from \"./HomeStyled\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport { filterGnomesBy } from \"./../../utils\";\n\n\nconst Home = (props) => {\n\n  console.log(\"props\")\n  console.log(props.store)\n  const { searchTerm, gnomes, orderByFilter, gender, currentPage, direction } = props;\n\n  //const [gender, setGender] = useState([]);\n\n  useEffect(() => {\n    console.log(\"calling again\")\n    props.fetchGender(format).then(response =>{ JSON.stringify(response); console.log(response)})\n\n    console.log(\"gender x\")\n    console.log(gender)\n\n  }, [])\n\n  console.log(\"AFTER\")\n  console.log(gender)\n\n  const referenceFetchGender = props.fetchGender;\n  const itemsByPage = 1;\n\n  //if(currentPage != 1){\n    //currentPage = props.getCurrentPage;\n    console.log(\"props.getCurrentPage\")\n    console.log(props.getCurrentPage(currentPage))\n    console.log(\"DIRECTION\")\n    console.log(props.direction)\n  //}\n  const updatedPageNext = props.getCurrentPage(currentPage).payload + 1;\n  const updatedPagePrevious = props.getCurrentPage(currentPage).payload  - 1;\n\n  let paginationDirection = 0;\n  if(props.direction != \"\"){\n    paginationDirection = props.direction == \"next\" ? updatedPageNext : updatedPagePrevious;\n  }else{\n    paginationDirection = props.getCurrentPage(currentPage).payload;\n  }\n\n  const gnomeNames = gnomes.map(gnome => gnome.name)\n  const pageGnomes = gnomeNames.slice(\n  itemsByPage * paginationDirection,\n  itemsByPage + paginationDirection * itemsByPage\n  ) // slice will control the pagination it calculate the quantity of items we want to show by the current page\n\n  pageGnomes.map(gnome => (\n    gnome => gnome.name\n  ))\n\n  const getFirstName = arr =>{\n    var arrCroped = [];\n      for(var a=0; a<arr.length; a++){\n\n        var corte = arr[a].indexOf(\" \");\n        arrCroped[a] = arr[a].substr(0, corte);\n      }\n      return arrCroped;\n  }\n\n  const justRenderedPageNames = getFirstName(pageGnomes);\n\n  const parseToService = arrToFormat =>{\n    var arrayFormated = [];\n\n      for(var b=0; b<arrToFormat.length; b++){\n        arrayFormated[b] = \"name[]=\"+arrToFormat[b];\n      }\n\n      return arrayFormated;\n\n  }\n\n  const format = parseToService(justRenderedPageNames).toString().replace(/,/g, \"&\");\n\n\n  // Filter the gnomes ordering them by youngest, oldest, lighter, heaviest, popularity\n  // Returns and array with all the filtered gnomes and finally generate\n  // our card based this filtered array\n  const searchFilters = filterGnomesBy(gnomes, orderByFilter)\n    .filter(gnome => {\n      // filter by profession\n      // If this gnome has this profession from redux state\n      // return the profession of this gnome\n      const isJob = gnome.professions.find(\n        profession => profession === props.filterBy\n      );\n\n      // And then if this gnome know this profession return true\n      // Otherwise return false and ignore pass this gnome to the new array\n      const hasProfession = gnome.professions.some(\n        profession => profession === isJob\n      );\n      // if filterBy state is all returns all gnomes if not return depending\n      // of the profession we're looking for\n      return props.filterBy === \"All\" ? gnome : hasProfession;\n    })\n    .filter(gnome => {\n      // Filter name\n      // This comentted expression is for search exactly\n      // if match from the beginning of the string\n      // gnome.name.toLowerCase().search(searchTerm.toLowerCase()) === 0\n\n      // Get the gnomes that contains this bit of string within\n      const search =\n        gnome.name.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;\n      return search;\n    });\n\n  return (\n    <HomeWrapper>\n      <Helmet>\n        <title>Nicolas Bergues</title>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"Assesment App\"\n        />\n      </Helmet>\n      <HomeRow>\n        <Filters />\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n        propsGender={format}\n        callGender={referenceFetchGender}\n        updateDirection={props.getDirection}\n      />\n      <HomeRow>\n      <TransitionGroup className=\"cards\">\n        {searchFilters.length > 0 ? (\n          searchFilters\n            .slice(\n              itemsByPage * currentPage,\n              itemsByPage + currentPage * itemsByPage\n            )\n            .map(gnome => (\n              <CSSTransition key={gnome.id} timeout={500} classNames=\"item\">\n                <Card\n                  key={gnome.id}\n                  gnome={gnome && gnome}\n                  to={`${gnome.id}-${gnome.name.split(\" \").join(\"-\")}`}\n                />\n              </CSSTransition>\n            ))\n        ) : (\n          <div className={\"notFound\"}>no gnomes founded for current search</div>\n        )}\n        </TransitionGroup>\n      </HomeRow>\n      <Pagination\n        page={currentPage}\n        updateGlobalState={props.getCurrentPage}\n        maxPages={Math.floor(searchFilters.length / itemsByPage)}\n        propsGender={format}\n        callGender={referenceFetchGender}\n        updateDirection={props.getDirection}\n      />\n    </HomeWrapper>\n  );\n};\n\n\nfunction mapStateToProps(state) {\n  console.log(\"state\")\n  console.log(state)\n  return {\n    searchTerm: state.searchTerm,\n    gnomes: state.gnomes,\n    gender: state.gender,\n    filterBy: state.filterBy,\n    orderByFilter: state.orderBy,\n    currentPage: state.currentPage,\n    direction: state.direction\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Home);\n"]},"metadata":{},"sourceType":"module"}